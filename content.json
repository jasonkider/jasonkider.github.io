{"meta":{"title":"MyCodingWorld","subtitle":"","description":"","author":"JasonKidd","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-12-25T17:52:42.000Z","updated":"2021-12-27T02:27:10.357Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"I'm jason kidd, welcome to my coding world！I will share some articles about work, programming and hobbies."},{"title":"friends","date":"2021-12-25T17:51:33.000Z","updated":"2021-12-29T01:39:26.551Z","comments":true,"path":"friends/index.html","permalink":"http://example.com/friends/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-12-25T17:48:13.000Z","updated":"2021-12-27T01:33:33.821Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-12-25T17:48:13.000Z","updated":"2021-12-27T01:33:41.562Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git","slug":"Git","date":"2023-11-16T01:33:23.000Z","updated":"2023-11-17T03:22:31.158Z","comments":true,"path":"2023/11/16/Git/","link":"","permalink":"http://example.com/2023/11/16/Git/","excerpt":"","text":"Git介绍123456&gt; 伴随linux产生，C语言开发，分布式版本控制系统(svn集中式)&gt; 组成：工作区+版本库 版本库包含暂存区（stage）与本地库 &gt; 流程：工作区-&gt;暂存区-&gt;本地库-&gt;远程库1. 集中式 一个中央数据库+多台电脑 修改需要每次拷贝和推送 时间长2. 分布式 多台电脑+一台作为处理器 修改只需推送修改的部分 时间短 命令1234567891011121314151617181920212223- git init 创建git仓库- git add &lt;文件名.&gt; 推送到暂存区- git add . 推送当前文件夹到暂存区- git commit -m &quot;日志&quot; 推送到版本库- git push -u origin &lt;分支名&gt; 本地分支推送远程并关联分支- git push 推送- git status 状态查看- git log 日志查询- git log pretty=oneline 日志查询简版- git reflog 查看操作日志- git diff HEAD -- &lt;文件名.&gt; 工作区与暂存区文件对比- git remote origin &lt;远程地址&gt; 添加远程仓库- git rm &lt;文件名.&gt; 删除版本库文件- git branch &lt;分支名&gt; 创建分支- git checkout branch 切换分支- git checkout -b 创建新分支并切换- git checkout -- &lt;文件名.&gt; 回退工作区内容- git reset --hard &lt;文件名.&gt; 暂存区回退工作区- git reset --hard &lt;commit_id&gt; 回退版本- git reset --hard HEAD^ 回退上一版 HEAD-当前分支 ^^-上上版- git clone &lt;远程地址&gt; 克隆远程仓库-","categories":[{"name":"Git","slug":"Git","permalink":"http://example.com/categories/Git/"}],"tags":[{"name":"版本控制系统","slug":"版本控制系统","permalink":"http://example.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"}]},{"title":"Typora常用快捷键","slug":"Typora常用快捷键","date":"2023-11-15T08:33:23.000Z","updated":"2023-11-15T08:38:02.412Z","comments":true,"path":"2023/11/15/Typora常用快捷键/","link":"","permalink":"http://example.com/2023/11/15/Typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"Typora常用快捷键菜单栏1234567- 文件：alt+F- 编辑：alt+E- 段落：alt+P- 格式：alt+O- 视图：alt+V- 主题：alt+T- 帮助：alt+H 文件12345678- 新建：Ctrl+N- 新建窗口：Ctrl+Shift+N- 打开：Ctrl+O- 快速打开：Ctrl+P- 保存：Ctrl+S- 另存为：Ctrl+Shift+S- 偏好：Ctrl+,- 关闭：Ctrl+W 编辑123456789101112131415161718- 撤销：Ctrl+Z- 重做：Ctrl+Y- 剪切：Ctrl+X- 复制：Ctrl+C- 粘贴：Ctrl+V- 复制为MarkDown：Ctrl+Shift+C- 粘贴为纯文本：Ctrl+Shift+V- 全选：Ctrl+A- 选中当前行/句：Ctrl+L- 选中当前格式文本：Ctrl+E- 选中当前词：Ctrl+D- 跳转到文首：Ctrl+Home- 跳转到所选内容：Ctrl+J- 跳转到文末：Ctrl+End- 查找：Ctrl+F- 查找下一个：F3- 查找上一个：Shift+F3- 替换：Ctrl+H 段落123456789101112- 标题：Ctrl+1/2/3/4/5- 段落：Ctrl+0- 增大标题级别：Ctrl+=- 减少标题级别：Ctrl+-- 表格：Ctrl+T- 代码块：Ctrl+Shift+K- 公式块：Ctrl+Shift+M- 引用：Ctrl+Shift+Q- 有序列表：Ctrl+Shift+[- 无序列表：Ctrl+Shift+]- 增加缩进：Ctrl+]- 减少缩进：Ctrl+[ 格式12345678- 加粗：Ctrl+B- 斜体：Ctrl+I- 下划线：Ctrl+U- 代码：Ctrl+Shift+`- 删除线：Alt+Shift+5- 超链接：Ctrl+K- 图像：Ctrl+Shift+I- 清除样式：Ctrl+ 视图12345678910111213- 显示隐藏侧边栏：Ctrl+Shift+L- 大纲视图：Ctrl+Shift+1- 文档列表视图：Ctrl+Shift+2- 文件树视图：Ctrl+Shift+3- 源代码模式：Ctrl+/- 专注模式：F8- 打字机模式：F9- 切换全屏：F11- 实际大小：Ctrl+Shift+0- 放大：Ctrl+Shift+=- 缩小：Ctrl+Shift+-- 应用内窗口切换：Ctrl+Tab- 打开DevTools：Shift+F12","categories":[{"name":"Typora常用快捷键键","slug":"Typora常用快捷键键","permalink":"http://example.com/categories/Typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%94%AE/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"Linux 学习路线","slug":"Linux学习路线","date":"2023-04-14T14:34:12.000Z","updated":"2023-04-14T14:46:54.303Z","comments":true,"path":"2023/04/14/Linux学习路线/","link":"","permalink":"http://example.com/2023/04/14/Linux%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","excerpt":"","text":"Linux 学习路线 Linux 学习路线 by 程序员鱼皮 💂 + 💻 = 👴🏽 建议先观看视频入门：https://www.bilibili.com/video/BV1ev411G7VE/ 为什么学 Linux？相比于 Windows，Linux 免费、开源、安全、灵活、稳定、便于开发，所以更受企业青睐，甚至 90% 以上 的企业应用都是用 Linux 服务器部署的。 无论是前端、后端、算法、测试、运维等计算机相关岗位的同学，都建议学习下 Linux，大有裨益。 学习境界首先，Linux 入门很简单，但想学的透彻难上加难！ 因此，在学习之前要明确目标。 可以 Linux 的学习分为几种境界： 明劲，就是了解 Linux 的基本概念，会敲常用命令来应对工作。对于大多数想从事开发和运维岗位的同学，学到这就足够找到工作了。 暗劲，又分为两种境界，能理解 Linux 尤其是其内核的设计思想，为小圆满；能将其思想应用到系统的架构设计中，为大圆满。暗劲境界的高手，冲击大厂、做架构师、从事底层开发，都不成问题。 化劲，可谓出神入化，不仅熟知 Linux 的使用、思想和细节，更能推陈出新，自主创造新的系统。 当然，一般情况下，会用就够了，想进大厂最好也学习一些内核的设计思想。找到工作后，是否要深入学习完全取决于你自己。 大纲 路线Linux 基础知识 发展历史 ⭐ 特点和优势 应用场景 ⭐ 常见 Linux 系统版本（推荐 CentOS 7+） ⭐ CentOS ⭐ Ubuntu Debian Fedora 何为开源？ Linux 环境 搭建方式 ⭐ 虚拟机 ⭐ 云服务器 在线工具 WSL Docker 容器 远程连接 ⭐ SSH 连接工具 ⭐ XShell ⭐ MobaXterm SecureCRT Putty Linux 常用命令 此处只列举命令名称，命令的具体用法可直接在手册中（https://www.linuxcool.com/）查询 系统信息 uname 查看系统信息 hostname 查看主机名 cat /proc/cpuinfo 查看 CPU 信息 lsmod 查看已加载的系统模块 top 查看系统使用情况 df 查看磁盘使用情况 fdisk 查看磁盘分区 du 查看目录使用情况 iostat 查看 I / O 使用情况 free 显示系统内存情况 env 查看环境变量 uptime 查看系统运行时间、用户数、负载 系统操作 shutdown 关机 reboot 重启 mount 挂载设备 umount 卸载设备 用户相关 su 切换用户 sudo 以管理员身份执行 who 查看当前用户名 ssh 远程连接 logout 注销 useradd 创建用户 userdel 删除用户 usermod 修改用户 groupadd 创建用户组 groupdel 删除用户组 groupmod 修改用户组 passwd 修改密码 last 显示用户或终端的登录情况 文件相关 cd 切换目录 ls 查看目录列表 tree 打印目录树 mkdir 创建目录 rm 删除目录 touch 新建文件 cp 复制文件 mv 移动文件 ln 创建文件链接 find 搜索文件 locate 定位文件 whereis 查看可执行文件路径 which 在 PATH 指定的路径中，搜索某系统命令的位置 chmod 设置目录权限 cat / more / less 查看文件 tac 倒序查看文件 head / tail 查看文件开头 / 结尾 paste 合并文件 zip / tar / gzip 压缩文件 unzip / tar / gunzip 解压文件 grep / sed / awk 文本处理 vim 文本编辑 程序相关 crontab 计划任务 nohup 后台运行程序 jobs 查看系统任务 ps 查看进程 kill 杀死进程 rpm / yum / apt / apt-get / dpkg 软件包管理 service / systemctl 服务管理 网络相关 ifconfig 查看网络属性 netstat 查看网络状态 iptables 查看 iptables 规则 其他 date 显示系统时间 cal 显示日历 history 显示与操作历史 help 帮助 alias 别名 用户管理 用户 用户组 ACL 权限管理 用户切换 管理员 文件管理 文件操作 创建 修改 复制 移动 删除 文件浏览 文件搜索 文件权限 软硬链接 压缩 / 解压 文本操作 正则表达式 grep sed awk VIM 编辑器 基本操作 模式 快捷键 VIM 定制 插件增强 送张 VIM 键盘图： 磁盘管理 使用情况查询 磁盘分区 挂载 驱动管理 驱动加载 驱动更新 网卡 显卡 进程管理 启动进程 杀死进程 查看进程 前台 / 后台任务 进程监控 计划任务 crond 服务 crontab 命令 网络管理 IP 端口 主机名 hosts 网络配置 网络状态 网络监控 系统管理 系统设置 日期时间 语言 字符集 系统服务 环境变量 日志 系统关机 / 重启 数据备份与恢复 服务管理 服务查看 启动服务 禁用服务 删除服务 开机自启 软件管理 软件包管理器 ⭐ rpm ⭐ yum apt apt-get dpkg 软件安装 软件更新 软件卸载 源码安装 常用软件 / 服务搭建 HTTP Mail NFS DNS FTP mysql LVS + Keepalived Apache Nginx Redis 日志服务 Shell 脚本编程 默认变量 运算符 条件 循环 执行 函数 系统函数 自定义函数 规范 调试方法 管道 I/O 重定向 Linux 启动过程 BIOS 启动引导 引导加载程序 内核加载 系统初始化（init） 运行级别 启动内核 执行初始化脚本 用户登录 Linux 内核 内核的组成 目录结构 版本 模块 编译 裁剪 具体路线图参考： 第三方工具 Ansible Webmin 宝塔 Linux 岗位 后端开发（Java / Go / C++） 底层开发（C / C++） 运维开发 大数据 云计算 自动化运维 嵌入式开发 网络工程师 学习建议多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。 一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。 每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。 记不住没关系，用文档查就行了。 先会用，再理解。 时间不多的话，可以通过面试题来了解一些 Linux 设计思想，而不是直接去深入学习内核，虽说学会了的确大有裨益，但性价比不高。 资源 视频 ⭐ 2021 韩顺平 一周学会Linux：https://www.bilibili.com/video/BV1Sv411r7vd（基于 CentOS 7.6 版本较新，视频长度刚刚好，也比较完整） 【千锋】Linux 云计算基础视频教程 650 集入门：https://www.bilibili.com/video/BV1pz4y1D73n（很全面，适合时间足够、想认真学的同学） 【狂神说Java】Linux 教程 - 阿里云真实环境学习：https://www.bilibili.com/video/BV187411y7hF（算是个小的入门教程吧，时间足够的话还是推荐看更完整的） 细说Linux - 从入门到精通：https://study.163.com/course/courseMain.htm?courseId=983014（感觉有点啰嗦，作为备用吧） 玩转Vim 从放弃到爱不释手：https://www.imooc.com/learn/1129（好评很多） 阿里云 Linux 运维学习路线：https://edu.aliyun.com/roadmap/linux 书籍 《鸟哥的 Linux 私房菜 —— 基础篇》：http://cn.linux.vbird.org/linux_basic/linux_basic.php（经典） 《深入理解 LINUX 内核》：https://book.douban.com/subject/1767120/ 《深入Linux内核架构》：https://book.douban.com/subject/4843567/ 《Linux内核完全剖析》：https://book.douban.com/subject/3229243/ 《Linux内核设计与实现(原书第3版)》：https://book.douban.com/subject/6097773/ 文档 Linux 教程（菜鸟教程）：https://www.runoob.com/linux/linux-tutorial.html Linux 教程（W3CSchool）：https://www.w3cschool.cn/linux/ Linux 工具快速教程：https://linuxtools-rst.readthedocs.io（基础、工具进阶、工具参考） 合集 Linux内核学习资料：https://github.com/0voice/linux_kernel_wiki GitHub Linux 专区：https://github.com/topics/linux（很多好项目） GitHub Linux 合集：https://github.com/inputsh/awesome-linux（Linux 系列技术） StackOverflow：https://stackoverflow.com/questions/tagged/linux（解决问题必备） 掘金 Linux 专区：https://juejin.cn/tag/Linux（技术文章） 实战 ⭐ 蓝桥云课 Linux 基础入门：https://www.lanqiao.cn/courses/1（强烈推荐） 腾讯云动手实验室：https://cloud.tencent.com/developer/labs 阿里云体验实验室：https://developer.aliyun.com/adc/labs/ 阿里云知行实验室：https://start.aliyun.com/ 华为云沙箱实验室：https://lab.huaweicloud.com/ 社区（国内倒的差不多了） Linux 中国：https://linux.cn/ 开源中国：https://www.oschina.net/（综合的开源社区） 红帽官网：https://www.redhat.com/zh 工具 DistroTest 在线操作系统测试：https://distrotest.net ⭐ Linux 命令搜索：https://wangchujiang.com/linux-command Linux 命令大全手册：https://man.linuxde.net/ Linux 命令大全手册：https://www.linuxcool.com/ Linux 命令示例：http://linux-commands-examples.com/ 宝塔 Linux 面板：https://www.bt.cn/ 在线 Shell 脚本检查：https://www.shellcheck.net 面试题 牛客网 Linux 专项练习：https://www.nowcoder.com/intelligentTest 牛客网 Linux 面试题：https://www.nowcoder.com/search?query=linux%E9%9D%A2%E8%AF%95%E9%A2%98&amp;type=question Linux 常见面试题整理：https://zhuanlan.zhihu.com/p/376749877 Linux 常见面试题整理：https://github.com/0voice/linux_kernel_wiki#-%E9%9D%A2%E8%AF%95%E9%A2%98","categories":[{"name":"Linux 学习路线","slug":"Linux-学习路线","permalink":"http://example.com/categories/Linux-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}],"tags":[{"name":"学习路线","slug":"学习路线","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}]},{"title":"Java 学习路线","slug":"Java学习路线","date":"2023-04-14T14:34:12.000Z","updated":"2023-04-14T14:47:37.768Z","comments":true,"path":"2023/04/14/Java学习路线/","link":"","permalink":"http://example.com/2023/04/14/Java%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","excerpt":"","text":"Java 学习路线 Java 学习路线一条龙版 by 程序员鱼皮 💂 + 💻 = 👴🏽 建议先观看视频导读：https://www.bilibili.com/video/BV1Qf4y1K7ff/ 大纲 路线特点 最新，完整一条龙的大厂 Java 学习路线，从入门到入土 同时适用于想全面学习 / 快速求职的同学，可以根据符号来定制自己的专属学习路线 给出目标、学习建议、关键知识点、最优资源以及各类资源推荐（视频、书籍、文档、项目、工具等） 鱼皮自己是 Java 开发者，融入个人自学和从业的经历 + 思考，让路线有灵魂 划分阶段、更有计划，且在最后给出持续学习的方向、探索 Java 程序员发展的无限可能 完全开源，回馈社区，持续更新！ 符号表可以通过路线知识点前的表情字符，根据自己的实际情况选择学习： 🌕 所有同学必须学习！！！ 🌖 非常急着找工作，才可不学；目标大厂，必须学习！ 🌗 急着找工作的话，可不学；目标大厂，建议学习 🌘 时间充足的话，再去学 ⭐ 表示推荐资源 写在开头首先呢，我们要了解 Java 的应用场景和就业方向，看看和自己的学习目的是否一致。 目前，Java 由于其优秀的特性以及火爆的生态，岗位需求量大，是后台开发、安卓开发、大数据开发的主流编程语言，因此学习资源也很丰富，值得学习！ 有关更多编程语言的选择，大家可以看我的视频了解：https://www.bilibili.com/video/BV1y3411r7pX/ 阶段 0：前期准备 准备好一款在线、随时随地写代码的工具，不用在本地去安装和配置，是初学者的好帮手。 推荐网站 - 菜鸟工具：https://c.runoob.com/compile/10 准备一款记笔记的软件，学编程的过程中老师的思路、自己遇到的问题、解决问题的方法、心得感悟、遇到的好资料，都要记下来哦，好记性不如烂笔头，可以帮助你事半功倍。 推荐本地软件 Typora：https://www.typora.io/ （线上可以用 xx 文档） 推荐使用 Markdown 语法编写，鱼皮教程：https://www.bilibili.com/video/BV1no4y1k7YT/ 想学好编程，别背代码，要多写，把这句话刻到脑子里。 选视频和找资料的小技巧：多看评论区、多看隔壁评论区、不要看过期的视频。 如何访问 GitHub：https://mp.weixin.qq.com/s/uBFsuThsZ4kdkZgqfX12qA （上面有很多免费的编程学习资源、项目源码，程序员必备） 阶段 1：Java 入门目标培养兴趣、快速上手，能运行和编写简单的 Java 程序。 学完本阶段后，可以试着用 Java 解决一些数学计算问题、编写图书管理系统等桌面端 GUI 程序，甚至是五子棋之类的小游戏。 🌕 Java 编程基础（45 天）知识 Java 特点（看不懂没事，别背！） 环境搭建 IDEA 开发工具 新建项目 运行调试 界面配置 插件管理 Java 基础语法 数据类型 流程控制 数组 面向对象 方法 重载 封装 继承 多态 抽象类 接口 枚举 常用类 String 日期时间 集合类 泛型 注解 异常处理 多线程 IO 流 反射 学习建议初学一门语言时，一定要持续学习，不能中断！ 想要学好编程，一定要多敲代码！建议先跟着书上的例子敲一遍代码，然后试着自主编写代码，并完成课后练习。 不理解代码也没关系，可以学习 Debug 后，一行一行地打断点执行，查看程序的执行过程。千万不要觉得麻烦，养成习惯后真的能节省很多重复学习的时间。 经典面试题 为什么重写 equals 还要重写 hashcode？ == 和 equals 比较的区别 为啥有时会出现 4.0 - 3.6 = 0.40000001 这种现象？ final 关键字的作用 介绍 Java 的集合类 ArrayList 和 LinkedList 的区别 资源 视频 ⭐ 韩顺平 - 零基础 30 天学会 Java：https://www.bilibili.com/video/BV1fh411y7R8 （900 多集，顺序安排很合理，每个知识真正的打碎了，通俗、有示例、有实战、有思想） 文档 ⭐ 菜鸟教程：https://www.runoob.com/java/java-tutorial.html （可以在线练习） 廖雪峰 Java 教程：https://www.liaoxuefeng.com/wiki/1252599548343744 IDEA 中文教程：https://github.com/judasn/IntelliJ-IDEA-Tutorial IDEA Mac 快捷键指南，地址：https://www.jianshu.com/p/454c71172c46 IDEA Win 常用快捷键，地址：https://www.jianshu.com/p/5de7cca0fefc 书籍 《Head First Java》 在线游戏 Codegym：https://codegym.cc/zh （玩玩前几关培养兴趣不错，但后面收费了） 🌖 Java 8（3 天）知识 Stream API Lambda 表达式 新日期时间 API 接口默认方法 学习建议Java 8 是如今企业开发中最主流的 Java 稳定版本，在这个版本出现了很多实用的新特性，虽然面试考点不多，但能够提升编程效率，建议学习。 经典面试题 java 8 有哪些新特性？ HashMap 在 jdk 1.7 和 1.8 的区别？ 资源 视频 ⭐ 宋红康 - 全网最全Java零基础入门教程：https://www.bilibili.com/video/BV1Kb411W75N （只看 Java 8 部分即可） 文档 ⭐ 菜鸟教程：https://www.runoob.com/java/java8-new-features.html 书籍 《Java 8 实战》 工具 ⭐ 在线编写运行 Java 8：https://www.tutorialspoint.com/compile_java8_online.php 其他 Java 8 小代码片段：https://github.com/biezhi/30-seconds-of-java8 练手项目 Java 实现简单计算器：https://www.lanqiao.cn/courses/185 Eclipse 实现 Java 编辑器：https://www.lanqiao.cn/courses/287 一本糊涂账：https://how2j.cn/module/104.html Java 五子棋：https://blog.csdn.net/cnlht/article/details/8176130 Java 中国象棋：https://blog.csdn.net/cnlht/article/details/8205733 JAVA GUI 图书馆管理系统：https://github.com/uboger/LibraryManager JAVA 坦克大战小游戏：https://github.com/wangzhengyi/TankWar Swing 编写的俄罗斯方块：https://github.com/HelloClyde/Tetris-Swing 小小记账本：https://github.com/xenv/SmallAccount （适合了解数据库的同学） 尾声学完了 Java 基础后，有些同学会感到迷茫了啊，感觉好像啥也做不出来，不知道下一步做什么，我这一身的本领该如何施展啊？ 不要慌，也不要急着去学新技术，接下来我们要多用 Java 来写代码了，巩固基础，但是写什么呢？ 当然是数据结构和算法！ 阶段 2：巩固基础目标想学好编程，计算机基础知识要学好。 比如算法，是程序员的灵魂。学好算法有助于我们理解程序、开拓思路，因此也是很多公司面试时考察的关键，在找工作前，还是要刷个上百道算法题目的。 我们这个阶段的目标是：熟练使用 Java 语言来编写程序，巩固 Java 基础。（那直接用 Java 来写算法题目，一举两得，岂不美哉？） 此外，建议大家利用零碎时间多去了解 计算机基础知识 ，比如操作系统、计算机网络等，对你后面学习开发框架之类的知识都有帮助。 Java 基础（30 天）学习建议建议大家去阅读 《Java 核心技术卷 1》，这本书堪称经典，是帮助你复习巩固 Java 的不二之选，其中图形界面章节可以选择不看。 之后可以刷牛客的 Java 练习题，检验自己的水平，我当时刷了两遍 1000 题（每天 30 题，1 个月也就刷完了，二刷会更快！）。虽然都是选择题，但能学到很多 Java 语言的特性、避免写代码时容易犯的错误。 如果你时间不够，只是想快速找到工作，那么本章节甚至可以完全跳过，后面慢慢弥补即可。 资源 书籍 ⭐《Java 核心技术卷 1》 练习 ⭐ 牛客题库：https://www.nowcoder.com/intelligentTest 🌖 数据结构与算法知识 时间 / 空间复杂度分析 数据结构 数组 字符串 队列 栈 链表 集合 哈希表 树 二叉树 多叉树 字典树 算法 排序 双指针 查找 分治 动态规划 递归 回溯 贪心 位运算 DFS BFS 图 学习建议学算法一定要多思考、多练习！！！ 在复习 Java、巩固基础的过程中，每天可以坚持用 Java 做 2 - 3 道算法题目。 不用担心看不懂，直接进入 LeetCode 学习板块 LeetBook，提供了免费的教程，文字、图解、动画讲算法、在线练习应有尽有，从 0 开始，跟着学习基础知识、跟着教程刷一些同类题目，培养算法思路。 之后再由简单到复杂、由通过率高到低，自主刷题，多看题解，举一反三。一定要把自己做过的每道题目代码都自行保存好，定期复习。时间足够的话，也可以试着自己写写题解，在网上分享一下自己的刷题思路，找到自己坚持的动力。 有条件的朋友也可以试着参与竞赛，没什么门槛，可以帮助你集中精神，而且周赛的题目还是挺友好的~ 经典面试题 LeetCode 精选 100 道：https://leetcode-cn.com/problem-list/2cktkvj/ LeetCode 精选算法 200 题：https://leetcode-cn.com/problem-list/qg88wci/ 资源 文章 ⭐ 刷了 1000 多道算法题，一点心得：https://t.1yb.co/oT9q （鱼皮原创） 在线教程 ⭐ LeetCode LeetBook：https://leetcode-cn.com/leetbook/ 在线刷题 ⭐ LeetCode：https://leetcode-cn.com/ 书籍 ⭐《小灰的漫画算法》 ⭐《剑指 Offer》 《程序员代码面试指南》 图解算法数据结构：https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/ LeetCode 101（C++）：https://github.com/changgyhub/leetcode_101 LeetCode 题解（C++）：https://github.com/soulmachine/leetcode LeetCode Cookbook（Go 语言）：https://github.com/halfrost/LeetCode-Go 视频 尚硅谷 Java 数据结构与算法：https://www.bilibili.com/video/BV1E4411H73v （难度比面试的要求大一些，适合希望更全面学习的朋友） Leetcode 真题解析：https://www.bilibili.com/video/BV1a54y1b74k 工具 VisuAlgo 数据结构和算法动态可视化：https://visualgo.net/zh 数据结构可视化：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html RegExr：https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b （学习、创建和测试正则表达式的在线可视化工具） 网站 五分钟学算法：https://www.cxyxiaowu.com/ 🌘 计算机导论知识 计算机发展历史 计算机应用领域 计算机发展方向 计算机基本组成 二进制 编程语言发展 学习建议大学计算机专业的同学一般刚开学就会上这门课，虽说学习它并不会直接提高你的编程技能，但能够让你更了解计算机和编程，从而在一定程度上帮助你培养学习兴趣、确定学习方向。 自学的话，不用刻意去学习计算机导论，而是可以通过看视频、阅读课外读物的方式慢慢地了解计算机的故事。 资源 视频 《计算机科学速成课》：https://www.bilibili.com/video/BV1EW411u7th （从底层到上层的计算机知识科普，强烈推荐） 书籍 《半小时漫画计算机》 🌖 操作系统知识 操作系统的组成 进程、线程 进程 / 线程间通讯方式 进程调度算法 进程 / 线程同步方式 进程 / 线程状态 死锁 内存管理 局部性原理 学习建议说实话，操作系统这一块知识挺枯燥的。你说说我现在项目都不会做，你又让我看这些理论，是不是想让我头秃？ 我的建议是，可以先利用课余时间看一些网课或者有趣的课外书，对一些操作系统的概念先有个大致的印象，比如进程、线程、死锁，等后面有时间了再系统学习、等到找工作了再去背相关八股文。 还在校园就跟着学校的进度学习就成，自学的话可以看下《清华操作系统原理》视频，有实力的小伙伴，能看懂大黑书就更好了，但如果看不懂也别担心，这并不影响你后续知识的学习。 经典面试题 什么是死锁？死锁产生的条件？ 线程有哪几种状态？ 有哪些进程调度算法？ 什么是缓冲区溢出？ 资源 视频 《清华操作系统原理》：https://www.bilibili.com/video/BV1uW411f72n 书籍 《编码》 《30天自制操作系统》 《现代操作系统》（难度较大，不推荐新手看） 《深入理解计算机系统》（难度较大，不推荐新手看） 《 自己动手写操作系统》（国产好书，网上可以下载） 大学课件 浙大操作系统：https://github.com/QSCTech/zju-icicles 🌖 计算机网络知识 网络分层模型 网络传输过程 IP、端口 HTTP / HTTPS 协议 UDP / TCP 协议 ARP 地址解析协议 网络安全 DNS 域名解析 学习建议很多学习 Java 开发的同学最后都是从事 后端开发 的工作，而计算机网络知识是后端开发的重点。 和操作系统一样，自学网络可能会很枯燥，建议先看有趣的课外书，比如《图解 HTTP》；或者有趣的视频，比如《计算机网络微课堂》。后面要找工作面试前，再重点去背一些八股文就好了。还在学校的同学好好上课一般就没问题。 学习基础能帮助自己今后发展更稳定，且更容易接受新知识，所以请不要相信基础无用论。 经典面试题 计算机网络各层有哪些协议？ TCP 和 UDP 协议的区别？ TCP 为什么需要三次握手和四次挥手？ HTTP 和 HTTPS 协议的区别？ 资源 视频 《计算机网络微课堂》：https://www.bilibili.com/video/BV1c4411d7jb 书籍 ⭐《图解 HTTP》 《网络是怎样连接的》 ⭐《图解 TCP / IP》 大学课件 浙大计算机网络基础：https://github.com/QSCTech/zju-icicles 尾声巩固基础要花至少 1 个月的时间，当你读完《Java 核心技术卷1》并且不用查询文档也能熟练地用 Java 做题时，就可以接着往下了。 阶段 3：Java 企业开发基础目标面向薪资编程，学习实际后台开发工作要用的基础技术和框架，并能 独立 做出一个具有完整功能的 Java Web 项目。 学完这个阶段后，你应该已经能独立开发出大多数常见的后台系统了，比如各种管理系统、商城系统等。 🌕 MySQL 数据库（7 天）企业中大部分业务数据都是用关系型数据库存储的，因此数据库是后台开发同学的必备技能，其中 MySQL 数据库是目前的主流，也是面试时的重点。 知识 基本概念 MySQL 搭建 SQL 语句编写 约束 索引 事务 锁机制 设计数据库表 性能优化 学习建议其中，SQL 语句编写 和 设计数据库表 这两个能力一定要有！ 比如让你做一个学生管理系统，你要能想到需要哪些表，比如学生表、班级表；每个表需要哪些字段、字段类型。 这就要求大家多写 SQL、多根据实际的业务场景去练习设计能力。 经典面试题 MySQL 索引的最左原则 InnoDB 和 MyIsam 引擎的区别？ 有哪些优化数据库性能的方法？ 如何定位慢查询？ MySQL 支持行锁还是表锁？分别有哪些优缺点？ 资源 视频 ⭐ 老杜 - mysql入门基础 + 数据库实战：https://www.bilibili.com/video/BV1Vy4y1z7EX （较新、内容相对精炼，有习题） 尚硅谷 - MySQL基础教程：https://www.bilibili.com/video/BV1xW411u7ax （小姐姐讲课，但感觉音质一般） 在线练习 ⭐ SQL 自学网：http://xuesql.cn/ ⭐ SQL 在线运行：https://www.bejson.com/runcode/sql/ 文档 SQL - 菜鸟教程：https://www.runoob.com/sql/sql-tutorial.html MySQL - 菜鸟教程：https://www.runoob.com/mysql/mysql-tutorial.html 网站 数据库大全：果创云收录的各种数据库表设计 🌕 开发框架（60 天）Java 之所以能成为主流的企业开发语言，很大一部分原因是它完善的框架生态，用好框架，不仅能够大大提升开发效率，还能提高项目的稳定性、减少维护成本。 开发框架是后台开发工作中不可或缺的，也是面试考察的重点，一定要好好学！ 不知道 Java 能做什么的朋友们，学完开发框架，就会有答案啦。 下面给大家推荐的都是企业中应用最多的主流开发框架，知识点比较零碎，就放在一起讲了。 知识🌕 Java Web 描述：Java 网页应用开发基础 一丢丢前端基础 XML JSON Servlet Filter Listener JSP JSTL Cookie Session 🌕 Spring 5 描述：Java 轻量级应用框架 IOC AOP 事务 🌕 SpringMVC 描述：Java 轻量级 web 开发框架 什么是 MVC？ 请求与响应 Restful API 拦截器 配置 执行过程 🌕 MyBatis 描述：数据访问框架，操作数据库进行增删改查等操作 增删改查 全局配置 动态 SQL 缓存 和其他框架的整合 逆向工程 🌗 MyBatis Plus 描述：Mybatis 的增强工具，能够简化开发、提高效率 引入 通用 CRUD 条件构造器 代码生成器 插件扩展 自定义全局操作 🌕 SpringBoot 2 描述：简化 Spring 应用的初始搭建以及开发过程，提高效率 常用注解 资源整合 高级特性 本地热部署 🌗 Spring Security 描述：Spring 的安全管理框架 用户认证 权限管理 相关技术：Shiro 🌗 Maven / Gradle 描述：项目管理工具 构建 依赖管理 插件 配置 子父工程 多模块打包构建 Nexus 私服搭建 学习建议由于技术较多，且框架之间存在一定的联系，因此建议大家看同一系列的视频教程（尚硅谷、狂神说等等都可以），以保证学习内容的连续以及体验上的一致。 学这些技术的时候，千万不能懒 ！一定要多记笔记，并且跟着老师写代码。原理部分不要太过纠结，先以能跟着敲出代码、写出可运行的项目为主，有些东西做出来也能帮助你更好地理解理论。 学习顺序挺重要的，建议按我推荐的顺序学，不要一上手就学 Spring Boot。只有先学习下自己整合框架的方法，才能帮你理解 SpringBoot 解决的问题，感受到它的方便和高效。 Maven / Gradle 当成工具用就好，面试基本不问，跟着框架教程去用就行了，急着找工作的话，先不用花太多时间去深入学。大厂面试问这个的也不多。 经典面试题 Spring 的 IOC 和 AOP 是什么，有哪些优点？ Spring 框架用到了哪些设计模式？ 介绍 Spring Bean 的生命周期 MyBatis 如何实现延迟加载？ 介绍 MyBatis 的多级缓存机制 资源 视频（按顺序看） ⭐ 尚硅谷最新版 JavaWeb 全套教程：https://www.bilibili.com/video/BV1Y7411K7zz （前端部分最好也看下） ⭐ 尚硅谷 - Spring 5 框架最新版教程（idea版）：https://www.bilibili.com/video/BV1Vf4y127N5 ⭐ 尚硅谷 - SpringMVC 2021 最新教程：https://www.bilibili.com/video/BV1Ry4y1574R ⭐ 尚硅谷 - MyBatis 实战教程全套完整版：https://www.bilibili.com/video/BV1mW411M737 ⭐ 尚硅谷 - MyBatisPlus 教程：https://www.bilibili.com/video/BV1Ds411E76Y Maven 零基础入门教程：https://www.bilibili.com/video/BV1TW411g7hP （搞不懂 Maven 可以看看） ⭐ 雷丰阳 2021 版 SpringBoot2 零基础入门：https://www.bilibili.com/video/BV19K4y1L7MT 尚硅谷 - SpringSecurity 框架教程：https://www.bilibili.com/video/BV15a411A7kP 🌘 开发规范（3 天）开发不规范，同事两行泪。 开发规范是团队开发中必须遵守的，有利于提高项目的开发效率、降低维护成本。 知识 代码规范 代码风格 命名 其他规则 代码校验（CheckStyle） 提交规范 学习建议有时间的话，简单过一遍大厂团队的代码规范手册就好了，以后做项目的时候能想起来的话就去使用，或者从书中、网上查规范文档，再去遵守。 项目做得多了，自然会养成好的习惯，不用刻意去记（毕竟每个团队规范也不完全相同，背了也没用）。也可以直接利用开发工具自带的一些代码检查插件，帮忙养成好的编码习惯。 资源 书籍 ⭐ 阿里巴巴 Java 开发手册：https://developer.aliyun.com/graph/java （搜索《Java开发手册》） 视频 华山版《Java开发手册》独家讲解：https://developer.aliyun.com/live/1201 文档 Google Java Style Guide：https://google.github.io/styleguide/javaguide.html （谷歌 Java 代码规范） 🌕 Git（3 天）此前大家可能听说过 GitHub，一流的代码开源托管平台。 Git 和它可不一样，是一个版本控制工具，可以更好地管理和共享项目代码，比如把自己的代码传到 GitHub 上、或者从远程下载。 无论自己做项目、还是团队开发，Git 都是现在不可或缺的神器。 知识 区分 Git 和 GitHub 工作区 分支 代码提交、推送、拉取、回退、重置 分支操作 代码合并、解决冲突 标签 cherry-pick Git Flow 相关技术：SVN（比较老） 学习建议每个命令跟着敲一遍，有个大致的印象，会用即可。 建议平时大家可以多把自己的代码使用 Git 命令上传到 GitHub 上，用的多了自然就熟悉了。 经典面试题 如何解决提交冲突？ 提交不小心出现误操作，如何撤销？ 什么是 Git Flow，它有什么好处？ 资源 视频 ⭐【尚硅谷】5h打通Git全套教程丨2021最新IDEA版 https://www.bilibili.com/video/BV1vy4y1s7k6 书籍 猴子都能懂的 Git 入门 https://backlog.com/git-tutorial/cn/ ⭐ GitHub 漫游指南 https://github.phodal.com/ 文档 GitHub 官方文档：https://docs.github.com/cn 游戏 Learning Git Branching：https://learngitbranching.js.org/?locale=zh_CN 🌖 Linux（10 天）企业中的很多前后台项目都是部署在 Linux 服务器上的，因此很有必要熟悉 Linux 的操作和脚本的编写。 后面学微服务、学架构都是在多台服务器操作，如果你不熟悉 Linux，会有点吃力。 知识 Linux 系统安装 环境变量 文件管理 用户管理 内存管理 磁盘管理 进程管理 网络管理 软件包管理 服务管理 日志管理 Linux 内核 常用命令 常用环境搭建 Shell 脚本编程 VIM 的使用 学习建议多动手实践，建议自己购买一台云服务器，并且在本地搭建 Linux 虚拟机环境。 一定要自己从 0 开始手敲命令安装软件、部署服务，熟悉整个项目的上线流程。 每个命令至少要跟着敲一遍，了解它们的作用，并通过自然地练习，熟悉常用的 Linux 命令。 记不住没关系，用文档查就行了。 先会用，再理解。一般面试问的 Linux 题目也不会很难，面试前去背一下八股文就没什么问题，感兴趣的话可以去看看 Linux 内核设计。 经典面试题 如何查看某个进程的运行状态？ 如何在 Linux 上查看 2 G 的大文件？ Linux 软链接和硬链接的区别 资源 视频 ⭐ 2021 韩顺平 一周学会Linux https://www.bilibili.com/video/BV1Sv411r7vd （基于 CentOS 7.6 版本较新） 书籍 《鸟哥的 Linux 私房菜 —— 基础篇》http://cn.linux.vbird.org/linux_basic/linux_basic.php （经典） 文档 Linux 工具快速教程：https://linuxtools-rst.readthedocs.io （基础、工具进阶、工具参考） 实战 ⭐ 蓝桥云课 Linux 基础入门：https://www.lanqiao.cn/courses/1 腾讯云动手实验室：https://cloud.tencent.com/developer/labs 阿里云体验实验室：https://developer.aliyun.com/adc/labs/ 阿里云知行实验室：https://start.aliyun.com/ 华为云沙箱实验室：https://lab.huaweicloud.com/ 社区 Linux 中国：https://linux.cn/ 工具 ⭐ Linux 命令搜索：https://wangchujiang.com/linux-command Linux 命令大全手册：https://www.linuxcool.com/ Linux 命令示例：http://linux-commands-examples.com/ 宝塔 Linux 面板：https://www.bt.cn/ 🌘 前端基础（14 天）虽然 Java 程序员面试时基本不会出现前端相关问题，但是在企业中，往往需要前后端程序员配合完成工作。会一些前端，不仅可以提高你们的协作效率，还能提高自己对整个项目的了解和掌控力，甚至能独立开发出一个完整项目！这点也是能给面试加分的。 知识 HTML CSS JavaScript Ajax Vue 学习建议不需要学习太多的前端技术，熟悉下基础的前端三件套，了解前端是如何向后端发送请求来做数据交互的一般就够了。有时间的话可以学下 Vue ，是比较容易上手的主流前端开发框架，Vue + SpringBoot 还是很香的。 资源参见鱼皮原创的前端学习路线：https://mp.weixin.qq.com/s/HbzLEt6NOP9Is9F3GOnbUQ 练手项目 更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。 HotelSystem：https://github.com/misterchaos/HotelSystem （酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架） 超市管理系统：https://github.com/zhanglei-workspace/shopping-management-system Mall4j：https://github.com/gz-yami/mall4j （Spring Boot 电商系统） newbee-mall：https://github.com/newbee-ltd/newbee-mall （基于 Spring Boot 2.X 的全栈电商系统） litemall：https://github.com/linlinjava/litemall （小商城系统，Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端） forum-java：https://github.com/Qbian61/forum-java （一款用 Java Spring Boot 实现的现代化社区系统） 尾声学完这个阶段的知识后，一定要再串起来回忆一遍，必须自己独立开发一个 Java Web 项目（量级可以不大，但你学过的技术尽可能地用上），能发布到 Linux 服务器上让其他小伙伴访问就更好了~ 如果你只是对 Java 感兴趣、或者只是想试着自己开发后台，并不是想靠 Java 找工作的话，学到这里就可以了。可以把更多时间投入到你主方向的学习中。 但如果你是想找 Java 方向的工作，尤其是想进大厂的话，一定要继续努力，用心学习下个阶段的企业开发进阶知识。 阶段 4：Java 企业开发进阶目标学习更多企业级开发技术和编程思想，能够结合多种技术，独立开发出架构合理的完整系统，解决实际问题 。 要了解为什么需要这个技术？什么时候用这个技术？某个需求该用哪些技术？ 当然，这个阶段的内容有些过于丰富，不是所有的东西都要学，大家可以根据自己的实际情况（时间），有选择地学习。 🌘 软件工程软件开发和管理的一些概念、原则、技术、方法、工具和经验。 知识 软件的本质 软件特性 软件过程 软件开发原则 开闭原则 里氏替换原则 依赖倒置原则 单一职责原则 接口隔离原则 迪米特法则 软件过程模型 敏捷开发 软件开发模型 需求建模 软件设计 UML 体系结构设计 设计模式 软件质量管理 评审 软件质量保证 软件测试 单元测试 集成测试 系统测试 压力测试 部署测试 软件配置管理 软件项目管理 软件项目估算 项目进度安排 风险管理 软件过程改进 成熟度模型 学习建议大学软件专业的必修课，偏理论，能学到很多企业软件开发的方法，也是对软件开发同学综合能力的提升，有时间的话可以了解下。但对想要快速找工作的同学来说，忽略即可，面试基本不会问。 资源 书籍 《软件工程：实践者的研究方法》：https://book.douban.com/subject/6047742/ （经典大黑书，讲的非常全面，但同样完整读下来还是有些难度的） 《软件开发的 201 个原则》：https://book.douban.com/subject/35628886/ （工具书，看一遍挺好的） 视频 清华大学软件工程：https://www.bilibili.com/video/BV1eE411V7Cr 北京大学软件工程：https://www.bilibili.com/video/BV1Vt411V72G 大连工业大学软件工程：https://www.bilibili.com/video/BV1Ns41177VM 大学课件 浙大计算机软件工程：https://github.com/QSCTech/zju-icicles 🌖 设计模式（21 天）设计模式是软件开发中解决一类问题的通用方法。 使用设计模式能让你写出更优雅、可维护的代码，也正因如此，很多框架源码都用到了设计模式，你不学很难看懂。 知识 创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程 单例模式 工厂方法模式 抽象工厂 建造者模式 原型模式 结构型模式：把类或对象结合在一起形成一个更大的结构 适配器模式 组合模式 装饰器模式 代理模式 享元模式 外观模式 桥接模式 行为型模式：类和对象如何交互，及划分责任和算法 迭代器模式 模板方法模式 策略模式 命令模式 状态模式 责任链模式 备忘录模式 观察者模式 访问者模式 中介者模式 解释器模式 学习建议先理解概念，了解每个设计模式的特点和应用场景，再多加练习，运用到实际项目。 经典面试题 单例模式有哪些实现方式？有哪些优缺点？请手写其中一种 你用过哪些设计模式，为什么用它？ 资源 书籍 ⭐《图解设计模式》（强烈推荐这本书，正是用 Java 语言实现，图多、有示例代码、有习题和答案，很不错） 《Head First 设计模式》 《大话设计模式》 《设计模式：可复用面向对象软件的基础》（大黑书，有能力的话也可以去读） 视频 尚硅谷图解 Java 设计模式：https://www.bilibili.com/video/BV1G4411c7N4 文档 菜鸟教程：https://www.runoob.com/design-pattern/design-pattern-tutorial.html 图说设计模式：https://design-patterns.readthedocs.io/zh_CN/latest/ 🌕 缓存（14 天）缓存是高并发系统不可或缺的技术，可以提高系统的性能和并发，因此是后台开发必学的知识点，也是面试重点。 知识 什么是缓存？ 本地缓存 Caffeine 库 多级缓存 Redis 分布式缓存 数据类型 常用操作 Java 操作 Redis Spring Boot Redis Template Redisson 主从模型搭建 哨兵集群搭建 日志持久化 缓存（Redis）应用场景 数据共享 单点登录 计数器 限流 点赞 实时排行榜 分布式锁 缓存常见问题 缓存雪崩 缓存击穿 缓存穿透 缓存更新一致性 相关技术：Memcached、Ehcache 学习建议学会如何简单地使用缓存并不难，和数据库类似，无非就是调用 API 对数据进行增删改查。 因此，建议先能够独立使用它，了解缓存的应用场景；再学习如何在 Java 中操作缓存中间件，并尝试和项目相结合，提高系统的性能。 跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。 经典面试题 Redis 为什么快？ Redis 有哪些常用的数据结构？ Redis RDB 和 AOF 持久化的区别，如何选择？ 如何解决缓存击穿、缓存穿透、雪崩问题？ 如何用 Redis 实现点赞功能，怎么设计 Key / Value？ 资源 视频 ⭐ 尚硅谷 - 2021 最新 Redis 6 入门到精通教程：https://www.bilibili.com/video/BV1Rv41177Af （基于 Redis 6 的，推荐） 文档 Redis 命令参考：http://redisdoc.com/ Redis 面试题整理：https://github.com/lokles/Web-Development-Interview-With-Java/blob/main/Redis%E9%97%AE%E9%A2%98.md 书籍 《Redis 实战》（经典） 工具 ⭐ Redis 在线练习：https://try.redis.io/ （强烈推荐） 🌖 消息队列（14 天）消息队列是用于传输和保存消息的容器，也是大型分布式系统中常用的技术，主要解决应用耦合、异步消息、流量削锋等问题。后台开发必学，也是面试重点。 知识 消息队列的作用 RabbitMQ 消息队列 生产消费模型 交换机模型 死信队列 延迟队列 消息持久化 Java 操作 集群搭建 相关技术：Kafka、ActiveMQ、TubeMQ、RocketMQ 学习建议和缓存一样，学会如何使用消息队列并不难，无非就是调用 API 去生产、转发和消费消息。 因此，建议先能够独立使用它，了解消息队列的应用场景；再学习如何在 Java 中操作消息队列中间件，并尝试和项目相结合，感受消息队列带来的好处。 这里我建议初学者先学习 RabbitMQ，比 Kafka 要好理解一些。跟着视频教程实操一遍即可，可以等到面试前再去深入了解原理和高级特性。 经典面试题 使用消息队列有哪些优缺点？ 如何保证消息消费的幂等性？ 消息队列有哪些路由模型？ 你是否用过消息队列，解决过什么问题？ 资源 视频 ⭐ 尚硅谷 - 2021 最新 RabbitMQ 教程：https://www.bilibili.com/video/BV1cb4y1o7zz （很新很全面） 文档 RabbitMQ 中文文档：http://rabbitmq.mr-ping.com/ 书籍 《RabbitMQ 实战：高效部署分布式消息队列》（经典） 工具 ⭐ RabbitMQ 在线模拟器：http://tryrabbitmq.com/ 🌖 Nginx（14 天）Nginx 是主流的、开源的、高性能的 HTTP 和反向代理 web 服务器，可以用于挂载网站、请求转发、负载均衡、网关路由等。前后端开发同学都需要学习，在后端开发的面试中有时会考到。 知识 Nginx 作用 正向代理 反向代理（负载均衡） 常用命令 配置 动静分离（网站部署） 集群搭建 相关技术：HAProxy、Apache 学习建议Nginx 的基本使用非常简单，甚至不需要看任何的视频，跟着一篇文章就能够用它来提供网站访问能力、实现反向代理。 但是在企业中，Nginx 的使用往往没那么简单，作为负载均衡、请求转发的重要组件，往往需要针对实际场景去写一些特定的配置。因此建议有时间的话，实践下 Nginx 的配置方法，了解 Nginx 基本的设计思想，对今后自己设计系统时也有帮助。 经典面试题 Nginx 有哪些作用？ Nginx 为什么支持高并发？ Nginx 有哪些负载均衡策略？ 什么是 Nginx 惊群问题，如何解决它？ 资源 视频 ⭐ 尚硅谷 - Nginx 教程由浅入深：https://www.bilibili.com/video/BV1zJ411w7SV （讲的比较全面） ⭐ Nginx 鱼皮 - 手把手带你从0搭建个人网站：https://www.bilibili.com/video/BV1rU4y1J785/ （简单演示 Nginx 部署网站） 文档 Nginx 中文文档：https://www.nginx.cn/doc/index.html 工具 Nginx 配置在线生成：https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN 🌗 Netty 网络编程（21 天）开源的 Java 网络编程框架，用于开发高性能（事件驱动、异步非阻塞）、高可靠的网络服务器和客户端程序。 很多网络框架和服务器程序都用到了 Netty 作为底层，学好 Netty 不仅可以让我们自己实现高性能服务器，也能更好地理解其他的框架应用、阅读源码。 知识 IO 模型（BIO / NIO） Channel Buffer Seletor Netty 模型 WebSocket 编程（动手做个聊天室） 相关技术：Vertx（中文文档：http://vertxchina.github.io/vertx-translation-chinese/ ，比 Netty 简单多了，实在看不懂 Netty 也可以学习下这个） 学习建议不同于之前学的 SSM 框架，Netty 还是需要一定学习成本的，一方面是国内资源太缺乏，另一方面很多重要的概念（比如 NIO）还是要多动手写代码调试才能理解。 还是建议先从视频入门，并且不建议在 Netty 上花太多时间，面试的时候一般也就考察一些 Netty 背后的思想（比如 NIO）而非框架本身的语法细节。 经典面试题 Netty 有哪些优点？ 什么是 NIO？ 介绍 Netty 的零拷贝机制 资源 视频 ⭐ 尚硅谷Netty教程：https://www.bilibili.com/video/BV1DJ411m7NR Netty 技术演讲（中文字幕版）：https://www.youtube.com/watch?v=I8yy2Cy7dDI 文档 Netty 4 用户指南：https://www.w3cschool.cn/netty_4_user_guide/ 书籍 《Netty 实战》 🌖 微服务（60 天）随着互联网的发展，项目越来越复杂，单机且庞大的巨石项目已无法满足开发、运维、并发、可靠性等需求。 因此，后台架构不断演进，可以将庞大的项目拆分成一个个职责明确、功能独立的细小模块，模块可以部署在多台服务器上，相互配合协作，提供完整的系统能力。 换言之，想做大型项目，这块儿一定要好好学！ 知识Dubbo 架构演进 RPC Zookeeper 服务提供者 服务消费者 项目搭建 相关技术：DubboX（对 Dubbo 的扩展） 🌖 微服务 微服务概念 Spring Cloud 框架 子父工程 服务注册与发现 注册中心 Eureka、Zookeeper、Consul Ribbon 负载均衡 Feign 服务调用 Hystrix 服务限流、降级、熔断 Resilience4j 服务容错 Gateway（Zuul）微服务网关 Config 分布式配置中心 分布式服务总线 Sleuth + Zipkin 分布式链路追踪 Spring Cloud Alibaba Nacos 注册、配置中心 OpenFeign 服务调用 Sentinel 流控 Seata 分布式事务 接口管理 Swagger 接口文档 Postman 接口测试 相关技术：YApi、ShowDoc 学习建议时间不急的话，建议先从 Dubbo 学起，对分布式、RPC、微服务有些基本的了解，再去食用 Spring Cloud 全家桶会更香。学完 Spring Cloud 全家桶后，再去学 Spring Cloud Alibaba 就很简单了。 这部分内容的学习，原理 + 实践都很重要，也不要被各种高大上的词汇唬住了，都是上层（应用层）的东西，基本没有什么算法，跟着视频教程学，其实还是很好理解的。 分布式相关知识非常多，但这里不用刻意去背，先通过视频教程实战使用一些微服务框架，也能对其中的概念有基本的了解。 大厂面试的时候很少问 Spring Cloud 框架的细节，更多的是微服务以及各组件的一些思想，比如网关的好处、消息总线的好处等。 经典面试题 什么是微服务，有哪些优缺点？ 什么是注册中心，能解决什么问题？ 资源 视频 ⭐ 尚硅谷 Dubbo 教程：https://www.bilibili.com/video/BV1ns411c7jV ⭐ 尚硅谷 SpringCloud（H版&amp;alibaba）框架开发教程（微服务分布式架构）：https://www.bilibili.com/video/BV18E411x7eT （把国外的 Spring Cloud 和国内的 Spring Cloud Alibaba 结合在一起对比着去讲，主流技术栈、知识点都讲到了，真心不错！） 文档 Apache Dubbo 官方文档：https://dubbo.apache.org/zh/ Spring Cloud Alibaba 官方文档：https://github.com/alibaba/spring-cloud-alibaba/blob/master/README-zh.md ⭐ Swagger 教学文档：https://doc.xiaominfo.com/ （跟着快速开始直接用就好了） 🌖 容器（7 天）将应用和环境进行封装，相互隔离、独立部署、便于移植，提高安全性、提高开发和维护效率。 便于实现微服务、持续集成和交付。 知识 🌖 Docker 容器概念 镜像 部署服务 Dockerfile Docker Compose Docker Machine Docker Swarm 多阶段构建 🌘 K8S（Kubernetes） K8S 架构 工作负载 资源类型 Pod Pod 生命周期 Pod 安全策略 K8S 组件 K8S 对象 部署应用 服务 Ingress Kubectl 命令行 集群管理 相关技术：Apache Mesos、Mesosphere 学习建议业务上云是趋势，但是对于开发同学来说，会用 Docker / K8S 部署项目和服务就行。实际工作中，企业一般都有现成的平台直接用，面试考察的也不多，不用花太多时间。 经典面试题 什么是容器？ 使用 Docker 有哪些好处？ 如何快速启动多个 Docker 节点？ 资源 视频 ⭐【狂神说】Docker 最新超详细版教程通俗易懂：https://www.bilibili.com/video/BV1og4y1q7M4 K8S 视频教程：https://www.bilibili.com/video/BV1K5411N7j8 书籍 《深入浅出 Docker》：https://www.zhihu.com/pub/reader/119632192 文档 Docker — 从入门到实践：https://vuepress.mirror.docker-practice.com/ 菜鸟教程 Docker：https://www.runoob.com/docker/docker-tutorial.html 国外 Docker 官方文档：https://docs.docker.com/get-started/ 网站 Docker 中文社区：https://www.docker.org.cn/ （强烈推荐，有很多 Docker 技术文章和学习笔记） Docker Blog：https://www.docker.com/blog/ （国外 Docker 技术博客） 镜像源 Docker Hub：https://hub.docker.com 腾讯软件源：http://mirrors.tencent.com/#/index 阿里云 Docker 仓库：https://cr.console.aliyun.com/ 🌗 CI / CD（3 天）持续集成 / 持续交付，贯穿整个研发到项目上线的过程，提高效率。 大公司一般都有自己的 CI / CD 平台。 知识 什么是 CI / CD CI / CD 有什么好处 使用任一 CI / CD 平台 相关技术：Jenkins、GitLab、微信云托管 学习建议了解它是什么，并且实战使用任一 CI / CD 平台，感受它和传统开发运维到底有什么不同，就足够了。其实很简单，不要花太多时间。 真正要自己去搭建的时候，跟着官方文档来就行。 资源 视频 ⭐【狂神说】CI/CD到底是什么？十分钟理解企业级DevOps：https://www.bilibili.com/video/BV1zf4y127vu （讲的非常棒！带你快速理解 CI / CD 的作用和部分原理） 尚硅谷 - Jenkins 持续集成工具教程：https://www.bilibili.com/video/BV1GW411w7pn （实在要用到 Jenkins 再去学） 文档 Jenkins 官方文档：https://www.jenkins.io/zh/ （有很多案例，要用的时候查一下就行了） 实战平台 ⭐ 微信云托管：https://cloud.weixin.qq.com/cloudrun （直播演示过，鱼皮后面会给大家出视频教程） 前端托管 Webify：https://cloud.tencent.com/product/webify （鱼皮给大家出过视频教程的 https://www.bilibili.com/video/BV11V411p7vf/） 练手项目 更多请见本路线阶段 5：[项目源码（50 套）](###项目源码（50 套）) 。 mall-learning：https://github.com/macrozheng/mall-learningmall （学习教程，架构、业务、技术要点全方位解析） miaosha：https://github.com/qiurunze123/miaosha （秒杀系统设计与实现） Mall：https://github.com/macrozheng/mall （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现） Spring-Cloud-Admin：https://github.com/wxiaoqi/Spring-Cloud-AdminCloud-Admin （基于 Spring Cloud 微服务化开发平台，具有统一授权、认证的后台管理系统） paascloud-master：https://github.com/paascloud/paascloud-master （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统） mall-swarm：https://github.com/macrozheng/mall-swarm （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统） SecKill：https://github.com/hfbin/Seckill （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统） jeecg-boot：https://github.com/zhangdaiscott/jeecg-boot （低代码开发平台） PassJava-Platform：https://github.com/Jackson0714/PassJava-Platform （一款面试刷题的 Spring Cloud 开源系统） 尾声看到这里，相信你已经感叹：编程语言一辈子学不完了！ 但是，不用担心，通过对这么多知识点的学习，相信你已经有了一定的积累，也不知不觉地锻炼了自主学习能力、资源检索能力、代码阅读能力、问题解决能力，之后的学习会越来越轻松。 接下来，可以试着用你学到的技术来解决实际的问题，自主从 0 开始做一些项目，保持编程手感。 阶段 5：项目实战目标综合所学技术从 0 到 1 开发和上线一个全面、有特色的、可以写进简历的个人项目。 学习建议其实在之前的框架学习视频中应该就做过几个项目了，但相对不够完整和体系化。 有想法的同学可以做任何自己想做的项目，推荐参加一些作品类竞赛，练手、拿奖、收获项目经历一举三得。 暂时没想法的朋友，建议先跟着专门带做项目的视频教程做 1 - 2 套 Java 完整项目，一定要从 0 到 1 自己手写！ 有能力的朋友也可以试着用 GitHub 上的源码来学习啦~ 做一个完整的项目的确很不容易，建议大家根据自己的 时间、兴趣 选择 较新的、有配套源码的 教程，保持耐心。 如何选择编程学习资源，可以看下我的原创文章：https://mp.weixin.qq.com/s/mlMql9RJCd7THt6rpGb8UA 下面推荐一些优质的、较新的项目实战视频教程 + 50 套项目源码。 视频教程 尚硅谷 - 谷粒学院 - 微服务 + 全栈 - 在线教育实战项目：https://www.bilibili.com/video/BV1dQ4y1A75e （全栈项目，前后端讲得都很全面） 尚硅谷 - 尚筹网 - Java项目实战开发教程 - SSM 框架 + 微服务架构：https://www.bilibili.com/video/BV1bE411T7oZ（500 多集，包含完整的用户权限管理，功能丰富、讲得很细致全面） 黑马 - 24 小时搞定 Java 毕设电商项目：https://www.bilibili.com/video/BV13f4y1r7fS 黑马程序员 Java 项目《传智健康》，超完整的企业级医疗行业项目：https://www.bilibili.com/video/BV1Bo4y117zV 黑马程序员 Java 项目《万信金融》企业级开发实战，互联网金融行业解决方案：https://www.bilibili.com/video/BV1Ub4y1f7rk 黑马程序员 Java 项目 SaaS 移动办公完整版《iHRM 人力资源管理系统》，跨行业 SaaS 办公整合性解决方案：https://www.bilibili.com/video/BV18A411L7UX 黑马程序员 Java 大型分布式微服务闪聚支付项目，Java 移动支付全生态系统：https://www.bilibili.com/video/BV17v411V79c 黑马程序员 Java 项目《好客租房》：https://www.bilibili.com/video/BV1sZ4y1F7PD 常用类库工具 Guava：谷歌开发的 Java 工具库（https://github.com/google/guava） Apache Commons：各类工具库，比如 commons-lang、commons-io、commons-collections 等（https://github.com/apache/commons-lang） Hutool：Java 工具集库（https://github.com/looly/hutool） Lombok：Java 增强库（https://github.com/projectlombok/lombok） Apache HttpComponents Client：HTTP 客户端库（https://github.com/apache/httpcomponents-client） OkHttp：适用于 JVM、Android 等平台的 Http 客户端（https://github.com/square/okhttp） Gson：谷歌的 JSON 处理库（https://github.com/google/gson） Jcommander：Java 命令行参数解析框架（https://github.com/cbeust/jcommander） Apache PDFBox：PDF 操作库（https://github.com/apache/pdfbox） EasyExcel：阿里的 Excel 处理库（https://github.com/alibaba/easyexcel） Apache POI：表格文件处理库（https://github.com/apache/poi） 测试 JUnit：Java 测试框架（https://github.com/junit-team/junit4） Mockito：Java 单元测试 Mock 框架（https://github.com/mockito/mockito） Selenium：浏览器自动化框架（https://github.com/SeleniumHQ/selenium） htmlunit：Java 模拟浏览器（https://github.com/HtmlUnit/htmlunit） TestNG：Java 测试框架（https://github.com/cbeust/testng） Jacoco：Java 代码覆盖度库（https://github.com/jacoco/jacoco） 其他 cglib：字节码生成库（https://github.com/cglib/cglib） Arthas：Java 诊断工具（https://github.com/alibaba/arthas） config：针对 JVM 的配置库（https://github.com/lightbend/config） Quasar：Java 纤程库（https://github.com/puniverse/quasar） drools：Java 规则引擎（https://github.com/kiegroup/drools） Caffeine：Java 高性能缓存库（https://github.com/ben-manes/caffeine） Disruptor：高性能线程间消息传递库（https://github.com/LMAX-Exchange/disruptor） Knife4j：Swagger 文档增强（https://doc.xiaominfo.com/） Thumbnailator：Java 缩略图生成库（https://github.com/coobird/thumbnailator） Logback：Java 日志库（https://github.com/qos-ch/logback） Apache Camel：消息传输集成框架（https://github.com/apache/camel） Quartz：定时任务调度库（https://github.com/quartz-scheduler/quartz） Apache Mahout：机器学习库（https://github.com/apache/mahout） Apache OpenNLP：NLP 工具库（https://github.com/apache/opennlp） RxJava：JVM 反应式编程框架（https://github.com/ReactiveX/RxJava） JProfiler：性能分析库（https://www.ej-technologies.com/products/jprofiler/overview.html） jsoup：HTML 文档解析库（https://jsoup.org/） webmagic：Java 爬虫框架（https://github.com/code4craft/webmagic/） IDEA 插件综合实用性、易用性、流行度、维护频率，精选了以下插件，简单分类为天地二品。 精选地品插件简单好用、增强功能 Background Image Plus + 描述：给编辑器设置背景图片（小姐姐图片） 官网：https://plugins.jetbrains.com/plugin/11247-background-image-plus- Chinese Language Pack 描述：中文支持 官网：https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack---- Translation 描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。 官网：https://plugins.jetbrains.com/plugin/8579-translation/ Key Promoter X 描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。 官网：https://plugins.jetbrains.com/plugin/9792-key-promoter-x/ Rainbow Brackets 描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读 官网：https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/ CodeGlance 描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。 官网：https://plugins.jetbrains.com/plugin/7275-codeglance/ WakaTime 描述：代码统计和跟踪插件 官网：https://plugins.jetbrains.com/plugin/7425-wakatime Statistic 描述：代码统计 官网：https://plugins.jetbrains.com/plugin/4509-statistic 精选天品插件提高开发效率和代码质量 String Manipulation 描述：字符串快捷处理 官网：https://plugins.jetbrains.com/plugin/2162-string-manipulation Tabnine AI Code Completion 描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化 官网：https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more GsonFormatPlus 描述：根据 json 生成对象 官网：https://plugins.jetbrains.com/plugin/14949-gsonformatplus JUnitGenerator V2.0 描述：自动生成单元测试 官网：https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0 RestfulTool 描述：辅助 web 开发的工具集 官网：https://plugins.jetbrains.com/plugin/14280-restfultool SequenceDiagram 描述：自动生成方法调用时序图 官网：https://plugins.jetbrains.com/plugin/8286-sequencediagram CheckStyle-IDEA 描述：自动检查 Java 代码规范 官网：https://plugins.jetbrains.com/plugin/1065-checkstyle-idea Alibaba Java Coding Guidelines 描述：代码规范检查插件 官网：https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines SonarLint 描述：帮助你发现和修复代码的错误和漏洞 官网：https://plugins.jetbrains.com/plugin/7973-sonarlint MybatisX 描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验 官网：https://plugins.jetbrains.com/plugin/10119-mybatisx 美化类 Extra Icons 描述：图标美化插件，支持更多文件类型 官网：https://plugins.jetbrains.com/plugin/11058-extra-icons Chinese Language Pack 描述：中文支持 官网：https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack---- Grep Console 描述：自定义设置控制台输出颜色 官网：https://plugins.jetbrains.com/idea/plugin/7125-grep-console Material Theme UI 描述：美观的主题 官网：https://plugins.jetbrains.com/plugin/8006-material-theme-ui Nyan Progress Bar 描述：进度条美化 官网：https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar activate-power-mode 描述：打字特效 官网：https://plugins.jetbrains.com/plugin/8330-activate-power-mode Power Mode II 描述：打字特效插件升级版 官网：https://plugins.jetbrains.com/plugin/8251-power-mode-ii Rainbow Brackets 描述：给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读 官网：https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/ Background Image Plus + 描述：给编辑器设置背景图片 官网：https://plugins.jetbrains.com/plugin/11247-background-image-plus- 代码生成类 Codota AI Autocomplete for Java and JavaScript 描述：使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化 官网：https://plugins.jetbrains.com/plugin/7638-codota-ai-autocomplete-for-java-and-javascript Tabnine AI Code Completion 描述：使用 AI 来自动提示和补全代码，比 IDEA 自带的代码补全更加智能化 官网：https://plugins.jetbrains.com/plugin/12798-tabnine-ai-code-completion-js-java-python-ts-rust-go-php--more UUID Generator 描述：生成随机的 UUID 官网：https://plugins.jetbrains.com/plugin/8320-uuid-generator Randomness 描述：生成随机值 官网：https://plugins.jetbrains.com/plugin/9836-randomness .ignore 描述：生成不同语言的版本控制忽略文件 官网：https://plugins.jetbrains.com/plugin/7495--ignore Auto filling Java call arguments 描述：通过快捷键自动补全函数的调用参数 官网：https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/ GenerateAllSetter 描述：快速生成调用对象 setter 方法的代码 官网：https://plugins.jetbrains.com/plugin/9360-generateallsetter GenerateSerialVersionUID 描述：一键为实现 Serializable 接口的类生成 SerialVersionUID 官网：https://plugins.jetbrains.com/plugin/185-generateserialversionuid/ GsonFormatPlus 描述：根据 json 生成对象 官网：https://plugins.jetbrains.com/plugin/14949-gsonformatplus Lombok 描述：配合 Lombok 依赖及注解使用，能够大大减少 Java 对象的代码量。IDEA 已自带，无需安装。 官网：https://plugins.jetbrains.com/plugin/6317-lombok/ Easy Code 描述：根据数据库表生成 Java entity、dao、mapper、service、controller 等代码 官网：https://plugins.jetbrains.com/plugin/10954-easy-code Easy Javadoc 描述：快速生成 Javadoc 文档 官网：https://plugins.jetbrains.com/plugin/12977-easy-javadoc JavaDoc 描述：生成 Javadoc 文档 官网：https://plugins.jetbrains.com/plugin/7157-javadoc Json2Pojo 描述：根据 JSON 生成 POJO，根据 POJO 生成 JSON 官网：https://plugins.jetbrains.com/plugin/8533-json2pojo JUnitGenerator V2.0 描述：自动生成单元测试 官网：https://plugins.jetbrains.com/plugin/3064-junitgenerator-v2-0 Jindent - Source Code Formatter 描述：根据自定义模板来生成 javadoc 注释 官网：https://plugins.jetbrains.com/plugin/8309-jindent--source-code-formatter MybatisX 描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码，优化体验 官网：https://plugins.jetbrains.com/plugin/10119-mybatisx MyBatisCodeHelperPro 描述：MyBatis 增强插件，支持自动生成 entity、mapper、service 等常用操作的代码（收费） 官网：https://plugins.jetbrains.com/plugin/9837-mybatiscodehelperpro 功能提效类源码阅读 Call Graph 描述：生成调用关系图，便于查看源码 官网：https://plugins.jetbrains.com/plugin/12304-call-graph Jump to Line 描述：支持跳转到任意行进行调试 官网：https://plugins.jetbrains.com/plugin/14877-jump-to-line SequenceDiagram 描述：自动生成方法调用时序图 官网：https://plugins.jetbrains.com/plugin/8286-sequencediagram jclasslib Bytecode Viewer 描述：字节码查看器 官网：https://plugins.jetbrains.com/plugin/9248-jclasslib-bytecode-viewer BrowseWordAtCaret 描述： 快速在相同单词间进行跳转 官网：https://plugins.jetbrains.com/plugin/201-browsewordatcaret CodeGlance 描述：在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。 官网：https://plugins.jetbrains.com/plugin/7275-codeglance/ 代码规范 CheckStyle-IDEA 描述：自动检查 Java 代码规范 官网：https://plugins.jetbrains.com/plugin/1065-checkstyle-idea Alibaba Java Coding Guidelines 描述：代码规范检查插件 官网：https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines SonarLint 描述：帮助你发现和修复代码的错误和漏洞 官网：https://plugins.jetbrains.com/plugin/7973-sonarlint FindBugs-IDEA 描述：帮你找出代码中潜藏的 Bug 官网：https://plugins.jetbrains.com/plugin/3847-findbugs-idea MetricsReloaded 描述：代码复杂度分析 官网：https://plugins.jetbrains.com/plugin/93?pr=idea 格式处理 CamelCase 描述：快速字符串格式转换工具，如驼峰式 官网：https://plugins.jetbrains.com/plugin/7160-camelcase Json Parser 描述：验证和格式化 Json 字符串的工具 官网：https://plugins.jetbrains.com/plugin/10650-json-parser Properties to YAML Converter 描述：把 Properties 文件的格式转为 YAML 格式 官网：https://plugins.jetbrains.com/plugin/8000-properties-to-yaml-converter String Manipulation 描述：字符串快捷处理 官网：https://plugins.jetbrains.com/plugin/2162-string-manipulation 代码统计 WakaTime 描述：代码统计和跟踪插件 官网：https://plugins.jetbrains.com/plugin/7425-wakatime Statistic 描述：代码统计 官网：https://plugins.jetbrains.com/plugin/4509-statistic 代码检索 OnlineSearch 描述：选择文本后支持不同搜索引擎进行搜索 官网：https://plugins.jetbrains.com/plugin/8298-onlinesearch/ CodeSearch 描述：快捷地打开搜索引擎进行搜索 官网：https://plugins.jetbrains.com/plugin/12578-codesearch 其他 Leetcode Editor 描述：在 IDEA 里刷算法题 官网：https://plugins.jetbrains.com/plugin/12132-leetcode-editor File Watchers 描述：监听文件，当其发生变化时自动执行命令 官网：https://plugins.jetbrains.com/plugin/7177-file-watchers PlantUML integration 描述：UML 建模工具，只需简单的代码就能画出复杂的 UML 类图 官网：https://plugins.jetbrains.com/plugin/7017-plantuml-integration Bytecode Editor 描述：字节码编辑工具 官网：https://plugins.jetbrains.com/plugin/8461-bytecode-editor Alibaba Cloud Toolkit 描述：阿里云工具集 官网：https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit Tencent Cloud Toolkit 描述：腾讯云工具集 官网：https://plugins.jetbrains.com/plugin/15653-tencent-cloud-toolkit EduTools 描述：面向教育者，允许创建、分享和加入练习 官网：https://plugins.jetbrains.com/plugin/10081-edutools IDE Features Trainer 描述：IntelliJ IDEA 官方出的学习辅助插件 官网：https://plugins.jetbrains.com/plugin/8554-ide-features-trainer JRebel Plugin 描述：项目热更新，提高效率（可惜要收费） 官网：https://plugins.jetbrains.com/plugin/4441-jrebel-and-xrebel-for-intellij Key Promoter X 描述：快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。 官网：https://plugins.jetbrains.com/plugin/9792-key-promoter-x/ Translation 描述：翻译插件，鼠标选中文本，点击右键即可自动翻译成多国语言。 官网：https://plugins.jetbrains.com/plugin/8579-translation/ idea_seat 描述：自动提醒，防止你久坐不动 官网：https://github.com/s-unscrupulous/idea_seat RestfulTool 描述：辅助 web 开发的工具集 官网：https://plugins.jetbrains.com/plugin/14280-restfultool Multirun 描述：同时启动多应用 官网：https://plugins.jetbrains.com/plugin/7248-multirun 扩展增强类 Free Mybatis Plugin 描述：MyBatis 增强插件，支持 mapper =&gt; xml 的跳转、代码生成等功能 官网：https://plugins.jetbrains.com/plugin/8321-free-mybatis-plugin MyBatis Log Plugin 描述：MyBatis SQL 提取和格式化输出 官网：https://plugins.jetbrains.com/plugin/10065-mybatis-log-plugin Maven Helper 描述：Maven 辅助插件 官网：https://plugins.jetbrains.com/plugin/7179-maven-helper Gradle View 描述：Gradle 项目管理工具的扩展 官网：https://plugins.jetbrains.com/plugin/7150-gradle-view Arthas Idea 描述： Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！ 官网：https://plugins.jetbrains.com/plugin/13581-arthas-idea/ GitToolBox 描述： Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。 官网：https://plugins.jetbrains.com/plugin/7499-gittoolbox/ BashSupport 描述：支持 Bash 脚本文件的高亮和提示等 官网：https://plugins.jetbrains.com/plugin/4230-bashsupport Git Flow Integration 描述：Git Flow 的图形界面操作 官网：https://plugins.jetbrains.com/plugin/7315-git-flow-integration Gitee 描述：开源中国的码云插件 官网：https://plugins.jetbrains.com/plugin/8383-gitee Drools 描述：规则引擎的扩展 官网：https://plugins.jetbrains.com/plugin/16871-drools EnvFile 描述：对多环境配置文件的支持 官网：https://plugins.jetbrains.com/plugin/7861-envfile Kubernetes 描述：容器管理的扩展 官网：https://plugins.jetbrains.com/plugin/10485-kubernetes Vue.js 描述：Vue.js 前端框架的扩展 官网：https://plugins.jetbrains.com/plugin/9442-vue-js Scala 描述：Scala 语言的扩展 官网：https://plugins.jetbrains.com/plugin/1347-scala Zookeeper 描述：Zookeeper 中间件的扩展 官网：https://plugins.jetbrains.com/plugin/7364-zookeeper Jms messenger 描述：对 Java 消息服务的扩展 官网：https://plugins.jetbrains.com/plugin/10949-jms-messenger MapStruct Support 描述：对 MapStruct 对象转换的支持 官网：https://plugins.jetbrains.com/plugin/10036-mapstruct-support Big Data Tools 描述：提供了 HDFS 等大数据框架的工具集 官网：https://plugins.jetbrains.com/plugin/12494-big-data-tools CSV 描述：支持 CSV 文件的高亮和提示等 官网：https://plugins.jetbrains.com/plugin/10037-csv Ideolog 描述：识别和格式化 log 日志文件 官网：https://plugins.jetbrains.com/plugin/9746-ideolog Toml 描述：支持 toml 文件的高亮和提示等 官网：https://plugins.jetbrains.com/plugin/8195-toml .env files support 描述：支持 .env 文件的高亮和提示等 官网：https://plugins.jetbrains.com/plugin/9525--env-files-support 常用软件以下部分软件可在【公众号：程序员鱼皮】回复【软件】获取~ 开发相关 JetBrains IDEA：Java 集成开发环境，凭学生邮箱可申请免费使用（https://www.jetbrains.com/idea/） Reset Jetbrains：你懂的 Visual Studio Code：插件化代码编辑器（https://code.visualstudio.com/） Sublime Text：轻量代码编辑器（https://www.sublimetext.com/） Navicat：数据库管理软件（https://www.navicat.com.cn/） JMeter：Java 性能测试工具（https://jmeter.apache.org/） JVisual VM：Java 运行状态可视化工具（https://visualvm.github.io/） XShell：SSH 连接软件（https://www.netsarang.com/zh/xshell/） XFtp：FTP 连接软件（https://www.netsarang.com/zh/xftp/） Redis Desktop Manager：Redis 可视化管理工具（https://github.com/uglide/RedisDesktopManager） Postman：接口测试工具（https://www.postman.com/） VMware：虚拟机软件（https://www.vmware.com/） Chocolatey：Windows 软件包管理器（https://chocolatey.org/） Typora：写文档软件（https://typora.io/） 效率 Ditto：强大的剪切板（https://ditto-cp.sourceforge.io/） uTools：插件化的效率工具（https://u.tools/） XMind：思维导图软件（https://www.xmind.cn/） Qdir：Windows 多窗口管理器（https://q-dir.en.softonic.com/） 项目源码（50 套）电商秒杀 天猫整站 J2EE：https://how2j.cn/module/115.htm 天猫整站 SSM：https://how2j.cn/module/134.html 天猫整站 Springboot：https://how2j.cn/module/156.html mall-learning：https://github.com/macrozheng/mall-learningmall （学习教程，架构、业务、技术要点全方位解析） SpringBoot 电商商城系统 Mall4j：https://github.com/gz-yami/mall4j SpringBoot 完整电商系统 Mall：https://github.com/macrozheng/mall （包括前台商城系统及后台管理系统，基于 SpringBoot+MyBatis 实现） newbee-mall：https://github.com/newbee-ltd/newbee-mall （一套电商系统，包括 newbee-mall 商城系统及 newbee-mall-admin 商城后台管理系统，基于 Spring Boot 2.X 及相关技术栈开发） paascloud-master：https://github.com/paascloud/paascloud-master （基于 spring cloud + vue + oAuth2.0，前后端分离商城系统） mall-swarm：https://github.com/macrozheng/mall-swarm （一套微服务商城系统，采用了 Spring Cloud Greenwich、Spring Boot 2、MyBatis、Docker、Elasticsearch 等核心技术，同时提供了基于 Vue 的管理后台方便快速搭建系统） onemall：https://github.com/YunaiV/onemall （mall 商城，基于微服务的思想，构建在 B2C 电商场景下的项目实战。核心技术栈，是 Spring Boot + Dubbo 。未来，会重构成 Spring Cloud Alibaba） litemall：https://github.com/linlinjava/litemall （又一个小商城，litemall = Spring Boot 后端 + Vue 管理员前端 + 微信小程序用户前端 + Vue 用户移动端） xmall：https://github.com/Exrick/xmall （基于SOA架构的分布式电商购物商城 前后端分离 前台商城:Vue全家桶 后台管理系统） miaosha：https://github.com/qiurunze123/miaosha （秒杀系统设计与实现） SecKill：https://github.com/hfbin/Seckill （基于 SpringBoot+Mybatis+Redis+RabbitMQ 秒杀系统） 博客论坛 Mblog：开源 Java 博客系统 halo：一个优秀的开源博客发布应用 forum-java：一款用 Java（spring boot） 实现的现代化社区（论坛/问答/BBS/社交网络/博客）系统平台 vhr：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。 favorites-web:云收藏 Spring Boot 2.X 开源项目。云收藏是一个使用 Spring Boot 构建的开源网站，可以让用户在线随时随地收藏的一个网站，在网站上分类整理收藏的网站或者文章。 community：码问，开源论坛、问答系统，现有功能提问、回复、通知、最新、最热、消除零回复功能。技术栈 Spring、Spring Boot、MyBatis、MySQL/H2、Bootstrap NiterForum：尼特社区-NiterForum-一个论坛/社区程序。后端Springboot/MyBatis/Maven/MySQL，前端Thymeleaf/Layui。可供初学者，学习、交流使用。 VBlog：V部落，Vue+SpringBoot实现的多用户博客管理平台! NiceFish：SpringBoot/SpringCloud 前后端分离项目 My-Blog： My Blog 是由 SpringBoot + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验。 My-Blog-layui：layui 版本的 My-Blog : A simple &amp; beautiful blogging system implemented with spring-boot &amp; layui &amp; thymeleaf &amp; mybatis My Blog 是由 SpringBoot + Layui + Mybatis + Thymeleaf 等技术实现的 Java 博客系统，页面美观、功能齐全、部署简单及完善的代码，一定会给使用者无与伦比的体验 symphony：Java 实现的现代化社区 管理系统 Spring-Cloud-Admin：Cloud-Admin 是国内首个基于 Spring Cloud 微服务化开发平台，具有统一授权、认证后台管理系统，其中包含具备用户管理、资源权限管理、网关 API 管理等多个模块，支持多业务系统并行开发，可以作为后端服务的开发脚手架。代码简洁，架构清晰，适合学习和直接项目中使用。核心技术采用 Spring Boot2 以及 Spring Cloud Gateway 相关核心组件，前端采用 vue-element-admin 组件。 bootshiro：基于 springboot+shiro+jwt 的资源无状态认证权限管理系统后端 悟空CRM：基于jfinal+vue+ElementUI的前后端分离CRM系统 EL-ADMIN：基于 SpringBoot 的后台管理系统 pig：基于 Spring Boot 2.2、 Spring Cloud Hoxton &amp; Alibaba、 OAuth2 的 RBAC 权限管理系统。 FEBS-Shiro：Spring Boot 2.1.3，Shiro1.4.0 &amp; Layui 2.5.4 权限管理系统。 Spring Boot-Shiro-Vue：基于Spring Boot-Shiro-Vue 的权限管理 studentmanager：基于springboot+mybatis学生管理系统 jshERP：华夏ERP基于SpringBoot框架和SaaS模式，立志为中小企业提供开源好用的ERP软件，目前专注进销存+财务功能。主要模块有零售管理、采购管理、销售管理、仓库管理、财务管理、报表查询、系统管理等。支持预付款、收入支出、仓库调拨、组装拆卸、订单等特色功能。拥有库存状况、出入库统计等报表。同时对角色和权限进行了细致全面控制，精确到每个按钮和菜单。 HotelSystem：酒店管理系统 Java,tomcat,mysql,servlet,jsp实现，没有使用任何框架 开发平台 open-capacity-platform：微服务能力开发平台 jeecg-boot：JeecgBoot是一款基于BPM的低代码平台！前后端分离架构 SpringBoot 2.x，SpringCloud，Ant Design&amp;Vue，Mybatis-plus，Shiro，JWT，支持微服务。强大的代码生成器让前后端代码一键生成，实现低代码开发！ 其他 学之思在线考试系统：一款 java + vue 的前后端分离的考试系统 PassJava-Platform：一款面试刷题的 Spring Cloud 开源系统 kkFileView：使用spring boot打造文件文档在线预览项目 dynamic-datasource：一个基于springboot的快速集成多数据源的启动器 moti-cloud：莫提网盘，基于 SpringBoot+MyBatis+ThymeLeaf+BootStrap，适合初学者 threadandjuc：three-high-import 高可用\\高可靠\\高性能，三高多线程导入系统（该项目意义为理论贯通) proxyee-down：http下载工具，基于http代理，支持多连接分块下载 hosp_order：医院预约挂号系统，基于 SSM 框架 趋势投资 SpringCloud DiyTomcat 阶段 6：Java 高级目标不满足于能做，而是通过更 深入 和 广泛 的学习，实现高质量的代码和更优秀的架构，培养解决问题的能力。 已经到了这个阶段，建议除了看完成的教程外，平时多自主搜索信息去学习，积少成多。比如遇到了一个不了解的名词，可以去网上搜一下，感兴趣的话再进行下一步的学习。 🌖 并发编程（21 天）对 Java 后端开发程序员来说，懂得如何利用有限的系统资源来提高系统的性能是很重要的，也是大厂面试考察的重点，因此并发编程（尤其是 Java 并发包的使用）这块的知识很重要。 把它放到高级，是因为在学并发编程前，需要有一定的编程经验、了解一定的操作系统知识。 知识 线程和进程 线程状态 并行和并发 同步和异步 Synchronized Volatile 关键字 Lock 锁 死锁 可重入锁 线程安全 线程池 JUC 的使用 AQS Fork Join CAS 学习建议并发编程入门不难，依然是 先学会使用 基础的 Java 并发包， 再通过大量地实践和测试，了解一些原理，才能真正掌握何时使用、如何更合理地使用并发编程。而不是张口闭口多线程，上天入地高并发。 经典面试题 volatile 关键字的作用 使用线程池有哪些好处？ 线程池参数如何设置？ 什么是线程安全问题，如何解决？ 介绍 synchronized 的锁升级机制 CopyOnWriteArrayList 适用于哪种场景？ 资源 视频 ⭐【尚硅谷】大厂必备技术之JUC并发编程2021最新版：https://www.bilibili.com/video/BV1Kw411Z7dF （特点是短、精、新） 黑马程序员全面深入学习Java并发编程：https://www.bilibili.com/video/BV16J411h7Rd （讲的很细、全面深入） 书籍 ⭐《Java并发编程实战》（国外的经典） ⭐《Java 并发编程艺术》（国人写的，理论思想内容较多，有时间建议反复看） 项目 ⭐ Java 并发知识点总结：https://github.com/CL0610/Java-concurrency 🌖 JVM（30 天）想要深入理解 Java，探秘 Java 跨平台的奥秘，一定要了解 Java 底层的虚拟机技术。 了解虚拟机、掌握虚拟机性能调优方法，有助于你写出更高性能、资源占用更小的优质程序。 在学习 JVM 的过程中，也能学到很多精妙的设计，开拓思路。 知识 JVM 内存结构 JVM 生命周期 主流虚拟机 Java 代码执行流程 类加载 类加载器 类加载过程 双亲委派机制 垃圾回收 垃圾回收器 垃圾回收策略 垃圾回收算法 StopTheWorld 字节码 内存分配和回收 JVM 性能调优 性能分析方法 常用工具 参数设置 Java 探针 线上故障分析 学习建议JVM 的知识略显枯燥，建议先看视频，有实操的地方一定要实操！自己多去分析。 第一遍不理解没有关系，可以再看书来巩固，想要真正学好，《深入理解 Java 虚拟机（第三版）》一定要读。 如果只是为了通过面试可以直接看更精简的视频，比如狂神的。 经典面试题 介绍 JVM 的内存模型？ JVM 内存为什么要分代？ 介绍一次完整的 GC 流程 介绍双亲委派模型，为什么需要它？ 资源 视频 ⭐ 尚硅谷宋红康 - JVM 全套教程详解：https://www.bilibili.com/video/BV1PJ411n7xZ （讲得相当全面！附有实操） 【狂神说Java】JVM快速入门篇：https://www.bilibili.com/video/BV1iJ411d7jS （讲得有点浅，但都是面试重点，时间紧的小伙伴可以直接看这个） 书籍 ⭐《深入理解 Java 虚拟机（第三版）》（有理论有实践，内容丰富，不可多得的 JVM 学习神书，就是有点废头发） 项目 ⭐ Java 虚拟机底层原理知识总结：https://github.com/doocs/jvm 实战 阿里云 JVM 实战：https://developer.aliyun.com/graph/java/point/64 工具 Arthas 开源 Java 诊断工具：https://github.com/alibaba/arthas 架构设计🌖 分布式 分布式理论 CAP BASE 分布式缓存 Redis Memcached Etcd 一致性算法 Raft Paxos 一致性哈希 分布式事务 解决方案 2PC 3PC TCC 本地消息表 MQ 事务消息 最大努力通知 LCN 分布式事务框架：https://github.com/codingapi/tx-lcn 分布式 id 生成 Leaf 分布式 id 生成服务：https://github.com/Meituan-Dianping/Leaf 分布式任务调度 XXL-JOB 调度平台：https://www.xuxueli.com/xxl-job/ elastic-job：https://gitee.com/elasticjob/elastic-job 分布式服务调用 trpc 分布式存储 HDFS Ceph 分布式数据库 TiDB OceanBase 分布式文件系统 HDFS 分布式协调 Zookeeper 分布式监控 Prometheus Zabbix 分布式消息队列 RabbitMQ Kafka Apache Pulsar 分布式日志收集 Elastic Stack Loki 分布式搜索引擎 Elasticsearch 分布式链路追踪 Apache SkyWalking 分布式配置中心 Apollo Nacos 🌗 高可用 限流 降级熔断 冷备 双机热备 同城双活 异地双活 异地多活 容灾备份 🌗 高并发 数据库 分库分表 MyCat 中间件 Apache ShardingSphere 中间件 读写分离 缓存 缓存雪崩 缓存击穿 缓存穿透 负载均衡 负载均衡算法 软硬件负载均衡（2、3、4、7 层） 🌘 服务网格服务网格用来描述组成应用程序的微服务网络以及它们之间的交互。服务网格的规模和复杂性不断的增长，它将会变得越来越难以理解和管理，常见的需求包括服务发现、负载均衡、故障恢复、度量和监控等。 知识 Istio 流量管理 安全性 可观测性 Envoy（开源的边缘和服务代理） 资源 资料大全：https://www.servicemesher.com/awesome-servicemesh/ istio 官方文档：https://preliminary.istio.io/latest/zh istio 视频教程：https://www.bilibili.com/video/BV1Lf4y1x7j8 在线体验 istio：https://katacoda.com/courses/istio/ 🌘 DDD 领域驱动设计将数据、业务流程抽象成容易理解的领域模型，通过用代码实现领域模型，来组成完整的业务系统。 知识 DDD 的优势 DDD 的适用场景 DDD 核心概念 领域模型分类：失血、贫血、充血、涨血 子域划分：核心域、通用域、支撑域 限界上下文 实体和值对象 聚合设计 领域事件 DDD 实践 资源 DDD 入门：https://juejin.cn/post/7004002483601145863 DDD 编码实践：https://juejin.cn/post/6844903903104860174 DDD 实践教程：https://www.bilibili.com/video/BV1Y341167Xp 🌘 其他 Sidecar Serverless 云原生 学习建议架构设计的学习没有顶点，多看文章，思考每种设计的优缺点和适用场景，有机会的话在企业中实践即可。 还在学校、或者初入这行的同学切记，千万不要一味地去背诵架构设计的八股文。你可以背，但是这一块的知识只有结合具体的项目才有意义，所以要多做项目去实践设计的合理性，而不是什么设计都咔咔往系统里去怼。比如面试问到分布式事务，能结合自己项目中用分布式事务解决问题的经验去回答最好。 🌘 其他技术 热数据探测技术：京东 HotKey 数据库流水订阅：阿里 Canal 监控告警 应用安全 故障演练 流量回放 阶段 7：Java 求职目标找到好工作 建议 尽早做规划，可以通过大厂招聘官网的岗位描述来了解岗位的要求 雕琢一份优秀的简历，推荐阅读：https://mp.weixin.qq.com/s/wfabzdpOPdq89faFFpZ4NA 多读面经，坚持刷算法 多参与面试，持续复盘总结 资源校招岗位 ⭐ 牛客求职校招版：https://www.nowcoder.com/recommend/campus 阿里 Java 开发：https://campus.alibaba.com/position.htm?refno=12699 腾讯后台开发：https://join.qq.com/post_detail.html?pid=1&amp;id=101&amp;tid=2 腾讯全栈开发：https://join.qq.com/post_detail.html?pid=1&amp;id=137&amp;tid=2 腾讯运营开发：https://join.qq.com/post_detail.html?pid=1&amp;id=105&amp;tid=2 美团后端开发：https://campus.meituan.com/jobs?jobFamily=1&amp;jobId=4005&amp;jobType=1&amp;pageNo=2 华为软件开发：https://career.huawei.com/reccampportal/portal5/campus-recruitment-detail.html?jobId=176044 社招岗位 ⭐ 牛客求职社招版：https://www.nowcoder.com/recommend/fulltime 阿里社招：https://job.alibaba.com/zhaopin/positionList.htm 腾讯社招：https://careers.tencent.com/search.html 实习 ⭐ 牛客实习广场：https://nowpick.nowcoder.com/w/intern/center 实习僧：https://www.shixiseng.com/ 内推 牛客内推：https://www.nowcoder.com/discuss/referral/index 鱼皮经历 从 0 开始的编程学习进大厂经历 ⭐ 我学计算机的四年，共勉：https://mp.weixin.qq.com/s/Nc7Ee2UyrPg6hGseQUCzeg 实习经历 ⭐ 我的第一份实习：https://mp.weixin.qq.com/s/SwGiRzyTkCOOCUXfXPR1Pw ⭐ 我的第二份实习，字节跳动：https://mp.weixin.qq.com/s/3q-YIfuZBjPjSnamNwOraw 知识总结 ⭐ 牛客 Java 面试宝典：https://www.nowcoder.com/tutorial/94 ⭐ JavaGuide：https://snailclimb.gitee.io/javaguide/#/ ⭐ CS-Notes：http://www.cyc2018.xyz/ 阿里 Java 技术图谱：https://developer.aliyun.com/graph/java 面经 ⭐ 牛客面经：https://www.nowcoder.com/discuss/experience?tagId=639 秋招总结&amp;Java心得（双非硕士，已拿11+5家Offer）：https://www.nowcoder.com/discuss/327041 被疫情逼得gap year的完全菜鸡的春招之路。：https://www.nowcoder.com/discuss/427812 谨以此文纪念2019年春招：https://www.nowcoder.com/discuss/181212 2019秋招经验谈：https://www.nowcoder.com/discuss/122463 秋招心得：https://www.nowcoder.com/discuss/317888 非科班本科菜鸡投的337家(Java后台)：https://www.nowcoder.com/discuss/133333 2018 这一年：https://www.nowcoder.com/discuss/137593 双非的秋招，感谢牛客：https://www.nowcoder.com/discuss/142181 二本本科Java上岸(滴滴京东58)2019秋招心得+面经：https://www.nowcoder.com/discuss/333912 碎碎念流水账特别长 of 自己的 Java 秋招：https://www.nowcoder.com/discuss/354154 秋招之路：个人历程以及面经总结：https://www.nowcoder.com/discuss/344311 【秋招面经总结】菜逼的坎坷之路（JAVA后台研发）：https://www.nowcoder.com/discuss/352030 阿里11面+EMC+网易+美团面经：https://www.nowcoder.com/discuss/105302 2018秋招阿里巴巴java笔试试题：https://www.nowcoder.com/discuss/67379 我的秋招经验分享（已拿BAT头条网易）：https://www.nowcoder.com/discuss/117071 20届的阿里 头条 网易 滴滴 百度 小米等Java面经：https://www.nowcoder.com/discuss/68289 拿了5个offer，回馈牛友发一波面经（长文详细）：https://www.nowcoder.com/discuss/79051 【总结】零基础学习一年拿到BAT三家offer：https://www.nowcoder.com/discuss/188241 本科生秋招经验总结帖：https://www.nowcoder.com/discuss/296586 双非渣硕校招总结+Java面经（网易阿里百度等）：https://www.nowcoder.com/discuss/134850 2018秋招笔试科大讯飞java笔试试题：https://www.nowcoder.com/discuss/67684 头条后台研发面经（共三面）：https://www.nowcoder.com/discuss/94233 一点点小经验和几家Java面经：https://www.nowcoder.com/discuss/138434 感谢牛客网！发一波面经！阿里、网易游戏、京东等offer。：https://www.nowcoder.com/discuss/101712 非科班水硕的春招实习总结- Java 后台开发：https://www.nowcoder.com/discuss/186528 十面阿里，七面头条，六个Offer，春招结束：https://www.nowcoder.com/discuss/80156 成功上岸，最后一波回馈：https://www.nowcoder.com/discuss/176434 【Java后台开发面经】阿里|网易|头条|腾讯|华为：https://www.nowcoder.com/discuss/108655 三跨学生的面经（头条、拼多多、华为、vivo）：https://www.nowcoder.com/discuss/195640 面试题解 ⭐ 2021 最新 Java 笔试、面试题合集：https://pan.baidu.com/s/1DE4HAu-DS80n7VOaGpU_KQ （密码：lkw1） 牛客网 Java开发校招面试考点汇总（附面试题和答案）：https://www.nowcoder.com/discuss/161991 50w字+的技术类校招面试题汇总（附答案+考点）：https://www.nowcoder.com/discuss/164726 硬件，软件（后端开发，算法，数据分析等）历年企业笔试真题汇总：https://www.nowcoder.com/discuss/212783 视频 ⭐ 尚硅谷 2021 逆袭版 Java 面试题第三季：https://www.bilibili.com/video/BV1Hy4y1B78T ⭐ 阿里大佬透彻讲解 Java 面试 500 道必考题：https://www.bilibili.com/video/BV1yU4y1J7Bb 阶段 8：持续学习目标持续追求技术的深度和广度，培养自己的 核心竞争力 和 不可替代性 ，学无止境！ 学习建议自主学习，自主搜索教程，多看书，多阅读技术博客，多实践。 学习方向框架源码 Spring SpringBoot SpringMVC MyBatis Netty Dubbo SpringCloud 计算机原理 《算法导论》：https://www.bilibili.com/video/av48922404 《现代操作系统》：https://www.bilibili.com/video/av9555596 《深入理解计算机系统》：https://www.bilibili.com/video/av31289365 《编译原理》： https://www.bilibili.com/video/av17649289 《计算机网络：自顶向下方法》：https://www.bilibili.com/video/BV1JV411t7ow 《计算机程序的构造和解释》：https://www.bilibili.com/video/av8515129 《数据库系统概论》：https://www.bilibili.com/video/BV1G54y1d7ZK 数据库 / 中间件 / 分布式 数据库 MySQL PostgreSQL 缓存 Redis 队列 Apache Kafka Apache Pulsar 搜索引擎 Elastic Stack Elasticsearch logstash kibana beats 容器 Docker K8S 解决方案 广告系统 电商系统 搜索系统 支付转账 游戏后台 即时通讯 社交系统 CMS 系统 ERP 系统 OA 系统 代码生成 权限管理 秒杀活动 架构设计同阶段 6 架构设计部分 大数据 5V 特点 Hadoop HDFS MapReduce Spark Flink Storm Hive HBase Druid Kylin Pig Mahout 前沿技术 云原生：https://www.jianshu.com/p/a37baa7c3eff Quasar Framework：http://www.quasarchs.com/ 服务网格：https://www.redhat.com/zh/topics/microservices/what-is-a-service-mesh istio：https://github.com/istio/istio GraalVM：https://juejin.cn/post/6850418120570437646 （高性能的通用虚拟机） 官网：https://www.graalvm.org/ ZGC：https://juejin.cn/post/6859276583656980493 （新一代垃圾回收器） 官网：http://openjdk.java.net/projects/zgc/ 自学 Java 专题资源 ⭐ GitHub Java 专区：https://github.com/topics/java ⭐ GitHub Java 合集：https://github.com/akullpp/awesome-java StackOverflow：https://stackoverflow.com/questions/tagged/java （解决问题必备） ⭐ 掘金 Java 专区：https://juejin.cn/tag/Java 美团技术团队：https://tech.meituan.com/ 阿里技术团队：https://102.alibaba.com/tech/list/ 有赞技术团队：https://tech.youzan.com/tag/back-end/ 附录程序员重要能力想成为大佬，就是要通过学习和积累，提升自己的各方面能力，比较抽象，共勉！ 团队协作能力 高效沟通能力 需求分析能力 架构设计能力 抽象复用能力 独立创造能力 问题解决能力 归纳总结能力 自主学习能力 工具利用能力 高效编码能力 信息检索能力 开源建设能力 源码阅读能力 自测审查能力 文档编写能力 知识表达能力 绘图描述能力 兴趣驱动（长期学习能力） 保持好奇心 其他（狗头） 复制粘贴能力 打架能力 PPT 制作能力 编程误区 我不适合学编程？❌（兴趣比天赋更重要，不要怀疑自己） 忽视基础，急于求成 ❌（勿以浮沙筑高台） 数学、英语差，就学不好编程 ❌（开发工作基本不用高等数学，英语可以使用翻译软件、工作中提升） 编程时，刻意记忆代码 ❌（知道每行代码的意义，能看文档写出来就行） 每行代码都要追求完美 ❌（何为完美？每个人的定义不同） 用百度搜索、复制粘贴的都是菜鸡程序员 ❌（艹） 我做的项目太小了，就不整理了 ❌（自己的每个项目都要整理，可以记录自己的成长） 跟别人交流很麻烦，我更愿意自己写代码 ❌（1 + 1 &gt; 2，切勿闭门造车，不过也要找到合适的同学去交流） 做别人做过的项目没有意义 ❌（连别人做过的项目都做不出，还想造新轮子？） 遇到 Bug，想办法绕过而不是寻找解决方案 ❌（Bug 最能使人成长） 遇到问题，第一时间去问别人而非自己解决 ❌（建议阅读《提问的智慧》） 花了很多时间、看了很多书，就能学好编程 ❌（编程最忌讳纸上谈兵） 只向前学习，不整理学过的知识 ❌（建议每学完一个知识，都去回想、总结、写心得，这个时间的花费是值得的） 单元测试不重要 ❌（一棍打死） 写文档不重要 ❌（一棍打死） 和我无关的工作，就不需要了解 ❌（了解团队、同行是很重要的，全局视野） 收藏的资源从来不看，就不收藏了 ❌（万一以后用到了呢？） 不去考虑需求的价值，而是一味寻求解决方案 ❌（不要成为需求机器，要有自己的独立思考） 高效法则 不要过分追求完美，完成比完美更重要。 有现成的代码，就不要自己写，避免重复劳动（学习除外）。 学会使用软件及快捷键来提升自己的编码效率。 做项目前，要先想清楚怎么做，做好充分的预研和设计。这样不仅便于后续的程序扩展，也能避免无意义的返工。 将大的目标进行拆解，做好计划，分清主次。不要因为觉得目标遥不可及而拖延，也不要盲目乐观而松懈。 养成好的作息习惯，找到自己适合工作的黄金时间。 记性不好，就多记录、多总结、定期复习。哪怕实在记不住，也可以借助文档、收藏夹软件来当自己的第二大脑。 积累属于自己的工具库，配合搜索软件实现随用随取。 多和其他同行交流或订阅技术推送，拓宽知识渠道，从而了解更多的工具和方法。有些东西你只要听说过，要用时也许就能节省大量查找时间。 找到让自己进入专注做事的状态的方法，比如戴上耳机、嚼口香糖等。 做事高效，离不开经验的积累，因此要多写代码、多做项目。 常见问题 按照这份路线学习，每天要学多少个小时，总共要学多久？ 回答：每个人学习能力不同，当然没有固定标准。我当时平均每天可以学习 6 个小时，寒暑假能保证 8 小时以上的学习，路线中的时长是我当时学习时长 * 1.5 倍的参考值。实话说，我的学习效率真的不高，对编程感兴趣，多学就好了。与其纠结这个时长，倒不妨多抽点时间，每天多学一点。 这份路线上推荐的资源，鱼皮都看完了么？ 回答：我是特么神仙啊？怎么可能都看完了！这份路线的本质是以网上现有的、死板的 Java 大学习框架为基础，结合我自己实际学习的知识、经验和感悟给它注入灵魂，从而希望给大家带来更大的帮助和价值。路线中的资源都是利用我自己的资源检索能力和渠道，通过试看、反复对比和参考评价精选出来的，不是主观臆断、空穴来风。 我学到这份路线的哪个位置，可以找工作？ 回答：这和你自己的领悟能力和教育背景有关。夸张点说，有些清华大学的同学，可能之前都没学过 Java，照样能找到大厂 Java 开发工作。学到同一阶段的同学，学习过程中的认真程度、积累总结数、做项目个数、基础学习的好坏不同，找到的工作肯定也不同。但一般情况下，想要进大厂，建议至少学完阶段 4 的微服务部分，然后去做一个完整的项目，用上之前学习的技术；不想进大厂的同学，学完第 3 阶段后，学下缓存和队列，一般也能找到 Java 开发的工作。 学完这份路线就能进大厂么？ 回答：你先学完，再问这个问题。没有绝对进大厂的保证，但是相信我，把这份路线上的大部分知识学了，再做做项目，哪怕进不了大厂，你拿到的薪水也绝对比松散学习的同学高！ 我可以相信你么？ 回答：不要相信我，应该相信你自己。想进大厂，就不要怀疑自己的能力！ 写在最后觉得看文字累的朋友，欢迎看下视频版，带大家导读一下：https://www.bilibili.com/video/BV1Qf4y1K7ff/ 以上就是鱼皮熬了几天大夜、结合个人经验、并且参考了大量网上的文章和评论总结而成的学习路线，真的是非常不容易，如果大家觉得满意请务必 三连 支持下。 我是鱼皮，持续分享编程干货的程序员，欢迎关注，下期再见~","categories":[{"name":"Java 学习路线","slug":"Java-学习路线","permalink":"http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}],"tags":[{"name":"学习路线","slug":"学习路线","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}]},{"title":"Python 学习路线","slug":"Python学习路线","date":"2023-04-14T14:34:12.000Z","updated":"2023-04-14T14:48:22.079Z","comments":true,"path":"2023/04/14/Python学习路线/","link":"","permalink":"http://example.com/2023/04/14/Python%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","excerpt":"","text":"Python 学习路线 Python 学习路线 by 程序员鱼皮 在看路线前，建议大家先通过以下视频了解几个问题： Python 为什么这么火？ 为什么都在说学 Python 找不到工作？Python 真香么？ 我要学 Python 么？ 怎么快速学习？ 视频地址：https://www.bilibili.com/video/BV133411C7u5/ Python 为什么火了？有很多原因，列举几点： 语法简单易学，其他语言 5 行代码才能实现的东西，Python 一行搞定！可以少写很多代码，因此不少同学拿 Python 刷算法题（但注意要理解算法本身哦）。 类库生态丰富，想做什么功能基本都有现成的代码，拿来直接用就行，无比方便！ 免费开源，感兴趣、有能力的同学可以自己去研究源码。 其他特性，比如跨平台、可扩展等。 作为数据科学、人工智能的首选语言，踩到了时代的风口。 于是乎，Python 被推向了神坛，甚至在 2021 年 10 月的编程语言排行榜中，Python 登上了第一位！ 但就是这样一门 “永远的神” 的编程语言，却在网上被口口相传说：学了 Python 找不到工作！ 哎，为啥呢？ 为什么 Python 不适合找工作？一方面是，大多数的企业，都不用 Python 来开发应用。 因为 Python 的运行速度太慢了，别说跟底层的 C++ 比了，Java 都能甩它几条街！而且这和语言本身的设计实现有关，所以哪怕你再出什么技术去优化它的性能，也终究有个瓶颈，世界上最好的语言 PHP 也是一样。 而对企业来说，性能 会直接影响用户体验和机器成本，尤其是在这个信息爆炸、大家都在追求性能的时代，Python 在应用开发领域的地位就很尴尬，而开发岗又正好是程序员中占比极高的岗位。 另一方面，虽然 Python 的应用场景很多、相关岗位也不少，又是什么 AI、数据科学的主流语言是吧，未来很美好。但是，这些前沿技术的难点并不是 Python 语言的代码本身，而是算法和思想。Python 只是一个调包、把你思想表达出来的工具而已。所以这些前沿岗位的门槛远比你入门 Python、或者听培训机构画饼时要高的多，算法岗位、大厂的产品岗真就是神仙打架，而且研究生居多。 学习目标既然这样，那我还要不要学 Python 呢？ 我认为：必须要学！ 但是，一定要先思考自己的学习目标，目标不同，对 Python 的学习态度和投入的时间也不同。 如果想找开发岗位的工作，像上面说的，不建议把 Python 作为你的主语言，而是把它当做你的副武器。只需简单学学 Python 基础，就可以编写 Python 脚本来自动化办公、提高工作效率、做一些小工具了，性价比很高。 如果说编程语言是工具，那 Python 是对这句话的完美诠释。 多会用一个神器，谁不爱呢？ 如果你想找其他岗位的工作，比如运维、测试、数据分析、产品经理、大数据、爬虫、人工智能、图像处理、多媒体处理、算法研究，当然也可以，只是如果以这些岗位为目标，除了要打好 Python 基础外，更重要的是理解对应领域的思想、方法和实践，而不是只会引库调包。 如果你是初学编程或者出于好奇学编程，我也建议你学 Python，好玩、能学下去、能培养兴趣，这些对初学者非常重要，有了兴趣之后，再学别的语言就会如鱼得水。 学习建议对于初学者和非 Python 岗位的从业者，就把 Python 当工具学，了解下基础语法和常用类库，需要写 Python 脚本时，能利用搜索引擎和文档写出（或者复制）代码就行。只要你学过其他编程语言，上手 Python 真的都很容易，3 - 7 天就能学会。 建议学习时多写些小例子，比如 Python 处理表格、Python 处理 PDF 等，感受 Python 类库的强大就完事儿~ 学习路线大纲折叠了一部分，还是老长，思维导图获取见文末 ： 学习路线基础 Python 安装 开发工具 PyCharm Sublime VS Code 变量 定义变量 关键字 命名规则 基本数据类型 类型转换 运算符和表达式 流程控制 条件分支 循环 基本数据结构 字符串 列表 元组 集合 字典 函数 定义 参数传递 作用域 lambda 表达式 常用内置函数 ⭐ 面向对象编程 类和对象 三大特性 封装 self 属性 方法 类方法 实例方法 静态方法 访问控制 继承 单继承 多继承 多态 方法重写 运算符重载 装饰器 反射 模块 导入模块 常用模块 文件处理 日期时间 包 导入包 生成包 异常处理 捕获异常 try … else … finally 结构 自定义异常 文件操作 文件开闭 文件读写 进阶 函数进阶 闭包 匿名函数 生成器函数 装饰器 高阶函数 正则表达式 数据库编程 数据库基础 SQL 编写 查询 聚合 分组 关联 排序 事务 数据库设计 数据库调优 并发编程 同步和异步 阻塞和非阻塞 多线程 多进程 协程 并发类库 网络编程 网络基础（七层模型、IP） 网络协议（TCP、UDP、HTTP、HTTPS、FTP、DNS） WebSocket web 开发 Django 框架 安装与 Demo MVT 分层 模型 数据库基础 ORM 单表查询 多表查询 聚合查询 视图 模板 模板语法 静态资源 路由 Django Admin 管理工具 测试 会话 鉴权 文件上传 中间件 高级特性 分页 缓存 本地缓存 Redis 分布式缓存 序列化 信号 celery 任务调度 Restful API 开发 概念 数据序列化 Django Rest Framework 部署 项目实战 前端基础 HTML CSS JavaScript Flask 框架 爬虫 概念 合法性 数据抓取 常用网络协议（http / https）概念 请求 请求头 请求参数 请求类型 响应 响应头 响应参数 requests 模块 urllib 模块 模拟登陆 静态 / 动态网站抓取 无头浏览器 selenium puppeteer 数据解析 常用标签 BeautifulSoup 正则表达式 xpath 数据导出 文件 Excel CSV 数据库 MongoDB MySQL 中间件 Redis Scrapy 框架 核心概念 命令行工具 Spiders Selectors Items Item Loaders 管道 Scrapy Shell Link Extractors 调度器 分布式爬虫 部署 并发异步爬虫 aioHttp asyncio 高级 IP 代理 验证码识别 APP 抓取 增量式爬虫 项目实战 反爬虫 请求头限制 验证码 黑白名单 封禁 IP 数据加密 数据混淆 行为分析 自动化运维 Linux 环境 Shell 脚本编写 脚本管理 脚本发布 Python 运维库 常用运维工具 数据分析（数据科学） 环境搭建 Anaconda Conda Miniconda Jupyter Notebook 常用数据结构 常用类库 Numpy 数组 索引 切片 多维数组 函数 Pandas Series DataFrame 索引 对齐 函数 统计 数据处理 数据清洗 层次化索引 数据连接 数据合并 分组聚合 轴向旋转 数据可视化 matplotlib seaborn pyechart 算法（人工智能） 鱼皮自己没怎么接触人工智能，结合网上很多大神的资料整理而成，也有一定参考意义。 数学基础 高等数学 线性代数 概率论 统计分析 机器学习 特征工程 模型 模型分类 模型评估 模型训练 模型调优 常用算法 监督与无监督学习 回归（有监督） 线性回归 决策树 集成算法 分类（有监督） 逻辑回归 决策树 支持向量机 集成算法 贝叶斯算法 聚类（无监督） k-means dbscan 降维 主成分分析 线性判别分析 进阶 GBDT 提升算法 lightgbm EM 算法 隐马尔科夫模型 多因子模型 常用库 Scikit-learn 量化交易策略 深度学习 数据预处理 算法 神经网络 卷积神经网络 递归神经网络 对抗生成网络 序列网络模型 常用算法 框架和平台 Tenserflow2 Pytorch Keras Caffe 自然语言处理 图像处理 计算机视觉 常用类库Python 能被广泛应用，很大程度上是因为其丰富的类库，就是他人提前写好并封装的代码。基本你要做什么东西都能找到对应的类库，直接看文档用就行了，大大提高开发效率！ 开源项目 awesome-python-cn（地址：https://github.com/jobbole/awesome-python-cn） 和 awesome-python（地址：https://github.com/vinta/awesome-python）已经帮大家整理了各方向的 Python 类库，数量非常多。鱼皮在此基础上筛选了一些相对优质的库，分享给大家。 通用日期处理 delorean：日期处理库 pendulum：日期时间操作库 dateutil：对标准 datetime 模块的强大扩展 终端优化 IPython：功能丰富的交互式 Python 解析器 Jupyter Notebook：基于网页的用于交互计算的应用程序 Prettytable：生成美观的 ASCII 格式的表格 Colorama：让终端具有颜色 bashplotlib：在终端中进行基本绘图 emoji：支持在 Python 终端输出表情 Ipyvolume：在 Jupyter notebook 中可视化 3d 体积和字形 文本处理 FlashText：高效的文本查找替换库 furl：url 处理库 pypinyin：汉字拼音转换工具 simplejson：JSON 编 / 解码器 JMESPath：JSON 查询语法库 其他 Pipenv：Python 官方推荐的新一代包管理工具 threading：自带的线程库 multiprocessing：自带的多线程库 Chardet：字符编码检测器 logging：日志功能 PySnooper：Python 调试工具 sphinx：Python 文档生成器 pyttsx3：文字转语音库 PyWin32：提供和 windows 的交互 shortuuid：生成唯一 uuid 的库 more-itertools：支持迭代操作对象 cryptography：密码学工具包 网络请求 &amp; 解析 requests：HTTP 请求库 aiohttp：异步 HTTP 网络库 scrapy：分布式网页采集框架 pyspider：一个强大的爬虫系统 BeautifulSoup：从 HTML 或 XML 文件中提取数据的库 you-get：网页视频下载器 wget：网页文件下载 musicdl：Python 音乐下载器 文件处理 openpyxl：Excel 读写库 tablib：处理表格数据 csvkit：用于转换和操作 CSV 的工具 XlsxWriter：操作 Excel python-docx：操作 office word 文档 PyPDF2：操作 PDF 文档 pdfminer：从 PDF 文档中抽取信息的工具 xhtml2pdf：HTML 转 PDF 工具 WeasyPrint：可视化网页，并支持导出为 PDF html2text：将 HTML 转换为 Markdown 文档 xmltodict：像处理 JSON 一样处理 XML moviepy：基于脚本的视频编辑模块 eyeD3：操作音频文件的工具 pyAudioAnalysis：音频特征提取分析 界面开发 pyQT：跨平台的用户界面开发框架 Turtle：交互式绘画库 pyglet：跨平台界面及多媒体框架 wxPython：Python 用户界面开发工具 Pygame：一组用来开发游戏的 Python 模块 Manim：Python 数学动画引擎 progressbar：一个滚动条函数库 progress：进度条输出 tqdm：快速、可扩展的进度条 测试 nose：测试框架 faker：生成假数据 PyAutoGUI：跨平台 GUI 自动测试模块 coverage：代码覆盖率测量 sqlmap：自动 SQL 注入和渗透测试工具 Web 开发 Django：Python 界最流行的 web 框架 Django REST framework：用于开发 web api 的框架 FastAPI：快速构建 web 应用程序 flask：Python 微型框架 Twisted：一个事件驱动的网络引擎 运维 psutil：跨平台的进程和系统工具模块 supervisor：进程控制管理系统 sh：让 Python 支持 shell 脚本 dnspython：DNS 工具包 scapy：数据包处理库 pexpect：在伪终端中控制交互程序 paramiko：远程连接服务 Ansible：IT 自动化平台 SaltStack：基础设施自动化和管理系统 watchdog：管理文件系统事件的 API 和 shell 工具 图像处理 &amp; 计算机视觉 Pillow：图像处理库 kornia：计算机视觉库 Opencv：开源计算机视觉库 Mahotas：计算机视觉和图像处理库 Luminoth：计算机视觉的深度学习工具集 数据分析 &amp; 数据科学 NumPy：数值计算工具包 Pandas：主流的数据分析工具 pyecharts：基于百度 Echarts 的数据可视化库 Dash：快速构建 Web 数据可视化应用 matplotlib：Python 2D 绘图库 Seaborn：使用 Matplotlib 进行统计数据可视化 python-recsys：实现推荐系统的库 vaex：高速大数据处理库 SciPy：算法和数学工具库 blaze：NumPy 和 Pandas 的大数据接口 statsmodels：统计建模和计量经济学 人工智能 Tensorflow：谷歌开源的最受欢迎的深度学习框架 keras：深度学习封装库，快速上手神经网络 Pytorch：具有张量和动态神经网络，并有强大 GPU 加速能力的深度学习框架 Caffe2：一个轻量、模块化、可扩展的深度学习框架 scikit-learn：基于 SciPy 构建的机器学习 Python 模块 PyMC：马尔科夫链蒙特卡洛采样工具 mmdetection：深度学习目标检测工具箱 imbalanced-learn：不平衡学习工具包 XGBoost：分布式梯度增强库 Gym：强化学习算法的工具包 自然语言处理 NLTK：自然语言处理工具包 Gensim：话题建模库 Pattern：自然语言处理工具 fuzzywuzzy：用于字符串模糊匹配、令牌匹配等 TextBlob：为进行普通自然语言处理任务提供一致的 API PyFlux：时间序列处理库 jieba：中文分词工具 大纲（大纲图） 岗位 腾讯校招 Python 相关岗位：https://join.qq.com/post.html?keyword=python 岗位薪资查询：OfferShow 小程序 运维工程师 Web 开发工程师（后端、全栈为主） 测试工程师 数据分析师 产品经理 算法工程师 机器学习 计算机视觉 NLP 多媒体处理 大数据工程师 大数据开发 数据挖掘 网络爬虫工程师 技术研究员 资源视频零基础 ⭐ 千锋教育 700 集零基础 Python 教程：https://www.bilibili.com/video/BV1R7411F7JV（非常全面，基础、web 开发、爬虫、数据分析、AI 基础都讲了，例子也很丰富） ⭐ 黑马程序员600集 Python 教程：https://www.bilibili.com/video/BV1ex411x7Em（比较全面，基于 Linux 环境学习，以 Python 基础 + 面向对象为重点，还包含一部分游戏开发） ⭐ Python 全栈开发教程：https://www.bilibili.com/video/BV1wD4y1o7AS（很纯粹的 Python 基础教程，案例多，适合快速入门） 小甲鱼 -《零基础入门学习Python》最新版：https://www.bilibili.com/video/av52080698（可惜，更新到一半就没了。。） 【麻省理工学院-中文字幕版】Python 和计算机科学导论公开课：https://www.bilibili.com/video/BV1ty4y1x7xP（适合外语不错的同学课外看，感受国外教学氛围） 阿里云 python 工程师学习：https://developer.aliyun.com/graph/python（有在线编程体验） 鱼皮公众号【程序员鱼皮】后台回复 Python，也有一套视频课 其他 Web 开发 Python Django 项目实战教程：https://www.bilibili.com/video/BV1pq4y1W7a1 Python + 微信小程序实战开发：https://www.bilibili.com/video/BV1Xy4y1s792（挺完整，后台用的 Django 框架） 数据结构与算法 Python 数据结构与算法全套 100 节：https://www.bilibili.com/video/BV1uA411N7c5 【北京大学】数据结构与算法Python版（完整版）：https://www.bilibili.com/video/BV1VC4y1x7uv 爬虫 2020 年Python爬虫全套课程（学完可做项目）：https://www.bilibili.com/video/BV1Yh411o7Sz Python 爬虫编程基础 5 天速成：https://www.bilibili.com/video/BV12E411A7ZQ（很短的爬虫实战入门课） 数据分析 自学数据分析课程：https://www.bilibili.com/video/BV1ZM4y1u7uF（很纯粹的数据分析 + 可视化课程，适合办公党快速上手） 完整数据分析课程：https://www.bilibili.com/video/BV1vV411p7D6（数据分析 + 机器学习，很全面） Python 数据分析入门视频合集：https://shimowendang.com/docs/36pykCPH6XCjKJcv/read 其他 一天搞定人脸识别项目（python+opencv）：https://www.bilibili.com/video/BV1Lq4y1Z7dm Python 自动化办公：https://www.bilibili.com/video/BV1uv411W7Fi（主要是处理 Excel） 书籍 ⭐《Python编程：从入门到实践》：https://www.code-nav.cn/rd/?rid=cbddf0af6064484f002658102cdbba17 《python学习手册》：https://www.code-nav.cn/rd/?rid=79550af260643c8e0ce47ab84633e200 《笨办法学Python3》：https://www.code-nav.cn/rd/?rid=b00064a760643bb90cbba72836995fd5 《Python编程快速上手》（第2版）：https://book.douban.com/subject/35387685/ 《Python Cookbook 中文版》（第3版）：https://book.douban.com/subject/26381341/ 《父与子的编程之旅》：https://www.code-nav.cn/rd/?rid=8937eaa9615519680ed81c0e3165ee65 ⭐《Python 深度学习》https://www.code-nav.cn/rd/?rid=2d44d6c261624dd31224ed1b5841920c 《Python网络爬虫实战》第2版：https://www.code-nav.cn/rd/?rid=b00064a7606440d40cbc2fca19192e4f 《Python数据科学手册》：https://book.douban.com/subject/27667378/ 《利用Python进行数据分析》：https://book.douban.com/subject/25779298/ 《轻量级Django》：https://www.code-nav.cn/rd/?rid=28ee4e3e60641fd60d91fd2441418491 ⭐ 编程导航 - 超多 Python 书籍直接免费下载 ：https://www.code-nav.cn/topic/Python（选择书籍标签） Python Guide（英文）：https://docs.python-guide.org/ 文档 ⭐ Python 入门教程（菜鸟教程）：https://www.runoob.com/python3/python3-tutorial.html（可以在线写代码练习） Python 入门教程（W3Cschool）：https://www.w3cschool.cn/python3/（支持手机阅读） Python 中文学习大本营：http://www.pythondoc.com/（一系列文档教程的集合） Python 100 天：https://github.com/jackfrued/Python-100-Days 廖雪峰 Python 入门教程：https://www.liaoxuefeng.com/wiki/1016959663602400 莫烦 Python 教程：https://mofanpy.com/（包括基础、数据处理、机器学习等，部分内容有视频） Django 官方教程：https://docs.djangoproject.com/zh-hans/3.2/intro/tutorial01/ Manim 动画引擎教程：https://docs.manim.org.cn/shaders/ A Byte of Python：https://python.swaroopch.com/（Python 英文入门教程） ⭐ 谷歌 Python 代码规范：https://google.github.io/styleguide/pyguide.html 实战 ⭐ 蓝桥云课 Python 实战合集：https://www.lanqiao.cn/courses/?fee=free&amp;tag=Python 腾讯云在线 Python 实验：https://cloud.tencent.com/developer/labs/gallery?tagId=23 阿里云 Python 入门实验：https://developer.aliyun.com/adc/scenario/e04fe73ad95d4782aef7aecca206196e 华为云沙箱实验室：https://lab.huaweicloud.com/testList.html Python123：https://python123.io/index（在线编程，部分课收费） CheckiO 游戏学 Python：https://py.checkio.org/ 通过测试交互式学 Python（英文）：https://github.com/gregmalcolm/python_koans 交互式 Python 挑战（英文）：https://github.com/donnemartin/interactive-coding-challenges 通过项目学 Python（英文）：https://github.com/practical-tutorials/project-based-learning#python 通过示例交互式学 Python（英文）：https://github.com/jerry-git/learn-python3 代码 数据结构和算法 Python 实现：https://github.com/keon/algorithms 《剑指 Offer》算法面试题 Python 实现：https://github.com/JushuangQiao/Python-Offer 设计模式 Python 实现：http://www.pythontip.com/python-patterns/detail/abstract_factory Python Machine Learning 代码：https://github.com/rasbt/python-machine-learning-book-3rd-edition Python 小脚本：https://github.com/RealHacker/python-gems 合集 ⭐ GitHub Python 专区：https://github.com/topics/python 神经网络和深度学习相关框架：https://github.com/ChristosChristofidis/awesome-deep-learning 机器学习相关库：https://github.com/josephmisiti/awesome-machine-learning#python 开源 Python 应用程序大全：https://github.com/mahmoud/awesome-python-applications Python 类库大全：https://github.com/vinta/awesome-python Python 类库大全（中文版）：https://github.com/jobbole/awesome-python-cn Python 异步大全：https://github.com/timofurrer/awesome-asyncio jupyter 相关：https://github.com/markusschanta/awesome-jupyter Python 书单：https://github.com/Junnplus/awesome-python-books Python 书单（中文版）：https://github.com/jobbole/awesome-python-books StackOverflow Python 专区：https://stackoverflow.com/questions/tagged/python（解决问题必备） ⭐ 掘金 Python 专区：https://juejin.cn/tag/Python（看技术文章） 社区 ⭐ PythonTab：https://www.pythontab.com/（中文 Python 开发者社区） Learnku Python 技术论坛：https://learnku.com/python 开源中国：https://www.oschina.net/（综合的开源社区） 工具 ⭐ Python 在线编程（菜鸟教程）：https://c.runoob.com/compile/6/ 腾讯云 Python 在线手册：https://cloud.tencent.com/developer/devdocs Python 在线手册汇总：https://docs.pythontab.com/ 面试题 ⭐ 牛客 Python 专项练习：https://www.nowcoder.com/intelligentTest 牛客 Python 试题：https://www.nowcoder.com/search?query=python&amp;type=question 牛客机器学习面试题：https://www.nowcoder.com/search?type=question&amp;query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0 牛客机器学习笔试：https://www.nowcoder.com/search?type=paper&amp;query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0 Python 面试题整理：https://github.com/taizilongxu/interview_python（高星） Python 面试题整理：https://github.com/kenwoodjw/python_interview_question 机器学习面试题：https://geektutu.com/post/qa-ml.html 其他 ⭐ Python 常见问题：https://docs.python.org/zh-cn/3/faq/general.html（官方提供的 ） GitHub Python 趋势：https://github.com/trending/python Python 模块推荐：https://pymotw.com/3/ Python 练习册：https://github.com/Yixiaohan/show-me-the-code（一些 Python 练习题目）","categories":[{"name":"Python 学习路线","slug":"Python-学习路线","permalink":"http://example.com/categories/Python-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}],"tags":[{"name":"学习路线","slug":"学习路线","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}]},{"title":"前端学习路线","slug":"前端学习路线","date":"2023-04-14T14:34:12.000Z","updated":"2023-04-14T14:49:07.086Z","comments":true,"path":"2023/04/14/前端学习路线/","link":"","permalink":"http://example.com/2023/04/14/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/","excerpt":"","text":"前端学习路线 这份学习路线并不完美，也不会有最终形态，正如前端不可预见、永无止境的未来。 💂 + 💻 = 👴🏽 建议先观看视频导读：https://www.bilibili.com/video/BV1nh411e7oG/ 路线特点 一份全面的前端知识点大梳理和汇总 分阶段学习，每个阶段给出学习目标 使用符号对知识点的重要程度做了区分，按需学习 知识点附有描述和资源链接 提供一份清晰的个人顺序学习路线方法 提供大量优质学习资源 符号表可根据知识点前的符号按需选学，并获取知识点描述和学习资源。 ⭐️ 必学（追求速成） ✅ 建议学（重要知识） ❗ 面试重点 ❌ 一般没必要学习 💬 描述 📚 资源 🎯 目标 大纲 前言 - 学编程需要的特质 前端学习七阶段 前端入门 巩固基础 前端工程化 前端优化 前端生态 前端求职 前端未来 我的前端学习路线 尾声 - 持续学习 前言 - 学编程需要的特质相信自己有能力，那么你就真的会有！ 兴趣 坚持 付出 心态 一、前端入门 💬 描述：学习前端基础三件套，建议从实战开始，边学边练，培养兴趣，快速入门。 📚 资源 freeCodecamp 在线编程：https://www.freecodecamp.org/ 阿里云前端实战学习：https://edu.aliyun.com/roadmap/frontend W3Cschool 编程入门实战：https://www.w3cschool.cn/codecamp/ pink老师前端入门教程：https://www.bilibili.com/video/BV14J4114768 🎯 目标：了解和实践各语言的基础语法，并能使用开发工具来独立开发一个留言板网站。 ⭐️ 开发工具 💬 描述：工欲善其事，必先利其器。 浏览器 ⭐️ Chrome ✅ Edge ✅ Firefox ❌ Opera Safari 编辑器 ⭐️ VSCode ✅ WebStorm Atom ⭐️ Sublime Text HBuilder X 记事本 在线 IDE 文档笔记 ✅ Markdown 语法 ✅ Typora 在线笔记 语雀 腾讯文档 石墨文档 印象笔记 Mdnice ⭐️ HTML 💬 描述：用于定义一个网页结构的基本技术。 📚 资源：https://developer.mozilla.org/zh-CN/docs/Learn/HTML ⭐️ 基本语法 ⭐️ 标签 分区 div 标题 h1 ~ h6 段落 p 图像 img 列表 ul / ol 超链接 a 表单 form 表格 table 框架 iframe ⭐️ 属性 ✅ HTML5 特性 语义化标签 浏览器支持 多媒体标签 Canvas 画布 ❌ 内联 SVG 本地存储 localStorage sessionStorage ❌ Web SQL Web Workers 应用缓存（Cache Manifest） 无障碍 ⭐️ CSS 💬 描述：层叠样式表，用于设计风格和布局。 📚 资源：https://developer.mozilla.org/zh-CN/docs/Learn/CSS ⭐️ 基本语法 ⭐️ 引入方式 行内样式 内部样式表 外部样式表 ⭐️ 选择器 通用选择器 标签选择器 id 选择器 class 选择器 属性选择器 派生选择器 后代选择器 子元素选择器 相邻兄弟选择器 组合选择器 伪选择器 选择器优先级 ⭐️ 属性 单位 px em rem vw vh 背景 文本 字体 列表 表格 ⭐️ 文档流 标准流 浮动流 定位流 ⭐️ 内联元素 / 块状元素 ⭐️ 盒子模型 content padding border margin ⭐️ 浮动 设置浮动 float 清除浮动 clear ⭐️ 定位 static absolute fixed relative sticky ⭐️ 层叠规则 ❗ BFC 和 IFC 机制 CSS3 ⭐️ 响应式布局 媒体查询 Flex 布局 Grid 布局 瀑布流 动画 过渡 渐变 背景 边框 圆角 字体 2D / 3D 转换 ⭐️ JavaScript 💬 描述：具有函数优先的轻量级，解释型或即时编译型的编程语言。 📚 资源：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript ⭐️ 基本语法 ⭐️ 数据类型 值类型 字符串 String 数组 Number 布尔 Boolean 空值 Null 未定义 Undefined Symbol 引用类型 对象 Object 数组 Array 函数 Function ✅ 数据类型转换 ✅ 函数 ⭐️ 概念 ⭐️ 自定义函数 调用方式 ⭐️ 全局调用 构造函数调用 ⭐️ 函数方法调用 apply call ✅❗ 闭包 ✅ 对象 概念 this 原型链和继承 常用对象 数字 Number 字符串 String 对象 日期 Date 对象 数组 Array 布尔 Boolean 算数 Math 自定义对象 ✅❗ 作用域（作用域链） ✅ BOM API ⭐️ DOM API ⭐️ JSON ⭐️ Ajax ✅ JavaScript 执行机制 ✅ ES6+ 特性 💬 描述：新引入的 JavaScript 语法特性。 📚 资源：ES6 入门教程 https://es6.ruanyifeng.com/ let 和 const 变量解构赋值 对象扩展和新增方法 Symbol Set 和 Map 数据结构 ⭐️❗ Promise &amp; async / await 异步编程 Generator 函数异步编程 二、巩固基础 💬 描述：学习前端、计算机、软件开发相关基础知识，并复习巩固上阶段学到的前端三件套。 📚 资源 《JavaScript 高级程序设计》：https://www.code-nav.cn/rd/?rid=28ee4e3e606b1e1a0e3cfd8952d172cf 《JavaScript 忍者秘籍》：https://www.code-nav.cn/rd/?rid=28ee4e3e606b16c00e3c5b18609e3dc2 🎯 目标：熟悉前端三件套语法，尤其是 JavaScript，并了解互联网、域名、浏览器、服务器等，扎实前端程序员的基本功，为下面进入实战开发做准备。 前端基础知识 ✅ 互联网 ⭐️ 域名 ⭐️ DNS ⭐️ 服务器 ✅ 浏览器 浏览器 DOM 事件流 / 事件委托 ⭐️ 浏览器加载顺序 ⭐️ 浏览器渲染过程 浏览器事件循环 浏览器同源策略 ❗ 跨域解决方案 浏览器缓存 控制台调试技巧 ✅ HTTP ❗ HTTP 请求过程 常见 HTTP 协议 HTTP 1.0 ⭐️ HTTP 1.1 HTTP 2 HTTP 3 ⭐️ HTTP 请求类别 ⭐️ 常见状态码 1xx 信息 2xx 成功 3xx 重定向 4xx 客户端错误 5xx 服务器错误 WebSocket ⭐️ Cookie Session ⭐️ HTTPS 计算机基础✅ 算法和数据结构 ⭐️ 时间 / 空间复杂度分析 数据结构 数组 字符串 队列 栈 链表 集合 哈希表 二叉树 算法 排序 双指针 查找 分治 动态规划 递归 回溯 贪心 位运算 DFS BFS 图 ✅ 计算机网络 HTTP 协议 网络模型 UDP / TCP 协议 ✅ 操作系统 进程、线程 进程 / 线程间通讯方式 进程调度算法 进程 / 线程状态 死锁 内存管理 软件开发基础✅ 设计模式 单例模式 代理模式 工厂模式 装饰者模式 观察者模式 策略模式 门面模式 ⭐️ Git 版本控制 常用命令 ✅ Linux 服务器 常用命令 ✅ 正则表达式三、前端工程化 💬 描述：前端工程化是使用软件工程的技术和方法来进行前端的开发流程、技术、工具、经验等规范化、标准化，其主要目的为了提高开发过程中的开发效率，减少不必要的重复工作时间。 📚 资源 什么是前端工程化？https://www.zhihu.com/question/433854153/answer/1713597311 🎯 目标：至少学会一门主流的前端开发框架（Vue / React），并配合脚手架、组件库、工具等从 0 开始独立搭建并开发一个完整的前端网站，可以试着仿一些知名站点。要求遵循企业开发规范，将项目代码提交到代码仓库中，并独立发布上线，供他人访问。此外，建议抓住机会参与一些团队项目，感受团队开发模式和前端工程化的优势。 ⭐️ 研发流程 技术选型 初始化 开发 本地测试 代码提交 编译、打包、构建 部署 集成测试 发布上线 监控运维 ⭐️ 代码托管 💬 描述：集中存储、备份你的代码，还能和团队成员协作开发。 ⭐️ GitHub Gitee GitLab ✅ Node.JS 💬 描述：一个开源与跨平台的 JavaScript 运行时环境。 它是一个可用于几乎任何项目的流行工具！ 📚 资源 Node.js 官方教程：http://nodejs.cn/learn Node.js 入门：https://cnodejs.org/getstart ⭐️ 包管理 💬 描述：用于安装 Node.js 的扩展、工具等。 ⭐️ npm ⭐️ yarn ❌ bower ✅ npx 开发框架 Express Koa Egg 开发框架 💬 描述：解决特定的问题,提高开发效率、简化我们的代码复杂度。 ⭐️ CSS 框架 ✅ BootStrap ⭐️ Tailwind CSS ⭐️ JavaScript 框架⭐️ Vue Vue Router Vuex ⭐️ React React DOM React Router Redux MobX React Hooks ❌ Angular RxJS NgRx ✅ Svelte✅ UmiJS封装库⭐️ 组件库 ✅ LayUI ⭐️ ElementUI（Vue） ✅ VantUI（Vue） ⭐️ Ant Design（React） Material UI 数据可视化 ✅ AntV Apache ECharts HighCharts D3.js 组件（插件） 富文本编辑器 弹窗 轮播图 工具库 ✅ jQuery ✅ Lodash ✅ Axios 时间处理 Moment.js 动效库 ✅ Animate.css Ant Motion 字体图标库 ⭐️ IconFont IconPark Font Awesome ⭐️ 脚手架 💬 描述：快速生成新项目的目录模板，提升开发效率和开发舒适性。 📚 资源：https://www.jianshu.com/p/25ce8cf2e6a7 Vue CLI create-react-app ✅ Yeoman ⭐️ 前端架构设计 💬 描述：一系列工具和流程的集合，旨在提升前端代码的质量，并实现高效可持续的工作流。 模块化 组件化 ✅ MVVM 设计原则 ⭐️ SPA 单页应用 ⭐️ 多页应用 ✅ 前端路由 PWA 有损服务 ✅ 服务端渲染 💬 描述：在服务端渲染 HTML 页面的模式。 📚 资源：https://www.zhihu.com/question/379563505 Next.js（React） Nuxt.js（Vue） ❌ Universal（Angular） BFF 💬 描述：Backend For Frontend（服务于前端的后端），就是服务器设计 API 时会考虑前端的使用，并在服务端直接进行业务逻辑的处理。 📚 资源：https://www.jianshu.com/p/eb1875c62ad3 GraphQL ✅ 微前端 💬 描述：将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的小块，从而解决庞大的一整块后端服务带来的变更与扩展方面的限制。 📚 资源：https://zhuanlan.zhihu.com/p/96464401 qiankun single-spa CSS in JS 💬 描述：用 JavaScript 来写 CSS。 📚 资源：http://www.ruanyifeng.com/blog/2017/04/css_in_js.html 内联样式 声明样式 引入样式 ⭐️ CSS 模块化 ⭐️ CSS Modules ✅ styled-components ✅ Styled JSX Emotion ✅ 开发调试 💬 描述：本地开发时热更新，提升开发效率。 webpack-dev-server serve 内网穿透 💬 描述：将内网外网通过 nat 隧道打通，让内网的网站、数据让外网可以访问。 Ngrok NATAPP ⭐️ CSS 预编译 💬 描述：使用新的扩展语言以增强 CSS 的能力，并通过预编译的方式将其转换为浏览器认识的 CSS 代码。 ⭐️ SASS ✅ PostCSS Stylus ❌ LESS 测试测试分类 ⭐️ UT 单元测试 SIT 系统集成测试 E2E 端到端测试 UAT 用户验收测试 ✅ Mock 💬 描述：通过随机数据，模拟各种场景，增加单元测试的真实性。 Mock.js ✅ 测试框架 ✅ Jest Enzyme ✅ Puppeteer（Headless Browser） Mocha Jasmine ✅ 代码质量开发规范 💬 描述：依照规范写出的代码会更加合理。 📚 资源：Airbnb 代码规范 https://github.com/BingKui/javascript-zh CSS Style Guide JavaScript Style Guide 类型校验 TypeScript 代码检查 ESLint StyleLint 代码风格 💬 描述：根据配置自动格式化代码，统一格式。 Prettier 提交规范 约定式提交 提交检查 💬 描述：在提交代码时触发一些操作，比如检查代码的风格等。 pre-commit husky 构建工具自动化构建 💬 描述：按照配置好的流程自动打包构建项目，提高团队的开发效率，降低项目的维护难度。 Gulp ✅ npm script Grunt 打包工具 💬 描述：将各种零散的📚 资源文件打包为可在浏览器等环境运行的代码。 ⭐️ Webpack ✅ Rollup ✅ Vite Parcel Snowpack CI / CD 💬 描述：通过在应用开发阶段引入自动化来频繁向客户交付应用。 GitLab CI ✅ Jenkins 部署⭐️ Web 服务器⭐️ Nginx 💬 描述：高性能的 HTTP 和反向代理 web 服务器。 📚 资源：腾讯云动手实验室 https://cloud.tencent.com/developer/labs/gallery 反向代理 解决跨域 改写请求 ✅ Apache容器✅ Docker 💬 描述：容器是一个标准化的软件单元，它将代码及其所有依赖关系打包，以便应用程序从一个计算环境可靠快速地运行到另一个计算环境。Docker容器镜像是一个轻量的独立的可执行的软件包。包含程序运行的时候所需的一切：代码，运行时间，系统工具，系统库和设置。 📚 资源：Docker 从入门到实践 https://vuepress.mirror.docker-practice.com/ Dockerfile Kubernetes部署策略 全量发布 蓝绿部署 滚动发布 灰度发布 监控告警 前端埋点 错误监控 性能监控 行为监控 四、前端优化 💬 描述：通过分析和优化手段，提高网站的性能和用户体验。 🎯 目标：实践前端优化方法，从多个方面优化自己做过的项目，最好能将优化后的网站与原网站进行对比，得到一些数据和体验上的明显提升。 ✅ 性能优化性能指标 💬 描述：用于衡量一个 Web 页面的性能。 📚 资源：https://juejin.cn/post/6844904153869713416 FP（First Paint） 💬 描述：从开始加载到浏览器首次绘制像素到屏幕上的时间，也就是页面在屏幕上首次发生视觉变化的时间。 FCP（First Contentful Paint） 💬 描述：浏览器首次绘制来自 DOM 的内容的时间。 FMP（First Meaningful Paint） 💬 描述：页面的主要内容绘制到屏幕上的时间。 FSP（First Screen Paint） 💬 描述：页面从开始加载到首屏内容全部绘制完成的时间，用户可以看到首屏的全部内容。 TTI（Time to Interactive） 💬 描述：表示网页第一次完全达到可交互状态的时间点，浏览器已经可以持续性的响应用户的输入。 优化手段 性能监控 Performance API 样式优化 JavaScript 优化 防抖 节流 代码分割 📚 资源压缩 打包优化 服务器优化 缓存优化 Service Worker 动画性能 dns-prefetch Lazy loading 优化启动性能 异步化 渲染优化 网络优化 移动端性能优化 ✅ CDN 💬 描述：内容分发网络，是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。 📚 资源：BootCDN https://www.bootcdn.cn/ 用户体验 设计系统 骨架屏 ✅ 兼容性浏览器兼容性 normalize.css html5shiv.js respond.js Babel Polyfill 屏幕分辨率兼容性跨平台兼容性SEO 💬 描述：搜索引擎优化，利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。 📚 资源：百度搜索📚 资源平台 https://ziyuan.baidu.com/cooperateresource/index robots.txt description keywords SiteMap HTML 标签优化 站内链接建设 友情链接 ✅ 安全 ⭐️ XSS CSRF 反爬虫 SQL 注入 DDoS 五、前端生态 💬 描述：如今，前端领域的范围越来越广，出现了更多前端工程师需要了解和关注的技术。 🎯 目标：能用学到的前端技术去做更多的事情，比如开发个人博客、文档网站、小程序、APP 等。 ⭐️ 静态站点构建开发 React Static 博客 ✅ Gatsby.js ✅ Docusaurus Hugo Hexo 文档 JekyII ⭐️ Docsify VuePress ✅ Dumi ✅ 大前端💬 描述：前端技术的融合更加紧密，应用的领域也更加广泛，前端领域的内容呈现多样化，除了网站外，还可以用前端技术跨平台开发 Android、iOS、小程序、虚拟现实、增强现实等。 移动应用 Hybrid WebView React Native Flutter 移动应用打包 Weex Cordova Phonegap Ionic 桌面应用 Electron NW.js Proton Native 小程序 原生 WebView 跨端开发框架 ✅ uni-app ✅ Taro Flutter Chameleon Wepy Rax 移动端调试 Chrome Dev Tools Android Simulator IOS Simulator ✅ Serverless 💬 描述：一种构建和管理基于微服务架构的完整流程，允许你在服务部署级别而不是服务器部署级别来管理你的应用部署，你甚至可以管理某个具体功能或端口的部署，这就能让开发者快速迭代，更快速地开发软件。 ✅ 云开发 💬 描述：云端一体化的后端云服务 ，采用 Serverless 架构，免去了移动应用构建中繁琐的服务器搭建和运维。同时云开发提供的静态托管、命令行工具（CLI）、Flutter SDK 等能力降低了应用开发的门槛。使用云开发可以构建完整的小程序/小游戏、H5、Web、移动 App 等应用。 ✅ 腾讯云云开发 阿里云云开发 低代码 💬 描述：无需编码（零代码）或通过少量代码就可以快速生成应用程序的开发平台。通过可视化进行应用程序开发的方法，使具有不同经验水平的开发人员可以通过图形化的用户界面，使用拖拽组件和模型驱动的逻辑来创建网页和移动应用程序。 腾讯云低码 阿里宜搭 六、前端求职 💬 描述：求职是一个漫长的过程，建议拉长战线，尽早准备。 🎯 目标：找到理想的工作。 流程 2020 秋招面经汇总：https://www.nowcoder.com/discuss/205497 简历 超级简历 面试题库 牛客前端工程师面试宝典：https://www.nowcoder.com/tutorial/96/f5212664ab664984882b00635066ded2 前端面试每日 3+1：https://github.com/haizlin/fe-interview React 面试题目 &amp; 题解：https://github.com/sudheerj/reactjs-interview-questions 面经 前端面经汇总：https://www.nowcoder.com/discuss/experience?tagId=644 面试实战 AI 模拟面试：https://www.nowcoder.com/interview/ai/cover?jobTagId=644 七、前端未来 💬 描述：前端未来可能的发展趋势和热门技术。 🎯 目标：关注前沿，持续进步。 WebAssembly 智能 UI React Server Component CSS Houdini WebComponents HTML templates（HTML模板） Custom elements（自定义元素） Shadow DOM（影子DOM） 我的前端学习路线虽然上面整理的学习路线知识点非常多，但是大家也别太担心，其实按照一定顺序和方法来学习，并不会很难，聊聊我的学习经历。 1. 快速入门，培养兴趣刚开始学习前端时，一定要以培养兴趣、快速入门为目标。我入门前端时，由于没有基础、啥都不懂，因此选择在线实战教程网站来学习，跟着教程案例一行行把代码敲下来，实时浏览显示效果，很轻松地就把 HTML、CSS、JavaScript 的语法基础过了一遍。但是这时，我对看过的知识点没有什么印象，基本是看了就忘，当我想要自己写一个网站，也根本无从下手。 于是，我开始试着死记硬背代码，结果发现背了之后还是不会写。那干脆一不做二不休，直接打开编辑器和教程网站，把之前在线实战时敲过的代码复制粘贴到编辑器中，然后再修改保存，到浏览器中打开文件。这样虽然要在编辑器和浏览器中来回切换，但起码能看到自己的网页文件运行的效果了。后来，我利用浏览器开发者工具提升了自己开发网站的调试效率，敲出的代码达不到满意的效果时，就再去查，再改，再浏览，最后终于完成了一个留言板网站！ 通过这件事，我明白了一个道理，既然记不住知识，那就先别强行记忆，上手多写，忘了就去查不就好了？不要担心自己知识不够做不出来，只要你去试，都一定能实现。 2. 多看多写，巩固基础在这种操作下，我虽然能使用基础三件套开发简易网站了，但做的很慢，还老出问题。于是，我开始完整地看了几本前端入门和项目实战书籍，有三件套入门的，也有响应式网站设计的，还有 JavaScript 综合讲解的，以及一套完整的视频教程，通过这些来复习巩固之前学过的知识，打好了基础，并且了解了更多实战教程上没见到的知识。 看书和视频的过程中，我跟着做了几个简易的网站，也是边看边做。在这之后，我发现自己渐渐地能够脱离文档来写网站了！ 3. 框架学习，学以致用但是，总感觉开发网站时，什么都要自己写，重复的代码写一大堆，很麻烦。于是，我试着上网搜了解决这些问题的方法，发现可以用组件库减少重复编写 HTML 和 CSS 代码，于是学了 LayUI，其实和之前一样的，就是打开官网找到要用的组件，然后复制到项目中修改就行了，写的多了竟然还真记住了一些（虽然这个没必要记）。 界面和样式代码简化了，但是 JavaScript 写的我依旧头疼。于是我决定进入下一个阶段的学习，当时先看了本书叫《锋利的 jQuery》来学习 jQuery，学会之后使用它趁热打铁做了几个网站，发现的确能大大简化繁琐的 JavaScript DOM 操作，让我尝到了甜头，又有了继续学习前端的动力。 在那之后大概半年，我开始学习主流前端框架 Vue，也是跟着视频教程学，并且结合 ElementUI 组件库开发了一个响应式网站。不得不说，习惯了用原生 JavaScript 和 jQuery 开发后，再去用 Vue 开发，真的是爽飞了，小有成就感。 4. 根据需要，自主学习在那之后，我就是通过不断地做项目来积累经验，既然编程知识太多学不完，那我就随需随学，逐渐拓宽自己的知识面。举个例子，我要做一个移动端 H5 页面，那就去搜 Vue 的移动端组件库，学会了 MintUI、VantUI 等；项目中要处理日期，那我就去搜日期处理库，学会了 Moment.js；项目重复文件和代码太多，我就去网上搜一些组件化、模块化的最佳实践；项目代码太大、加载太慢，我就去网上搜一些前端压缩、性能优化的方式；要把开发好的项目变成 APP，那我就去网上搜到了 Cordova 等打包工具；跟其他同学一起做项目时比较混乱、开发效率低，我就去搜了一些代码规范、前端工程化等；遇到 Bug 时，也是自己去网上搜索解决方案，并且还要看看有没有知识点是我遗漏的，我会再去弥补学习。通过不断实践、不断遇到问题和自主解决问题，我始终保持着学习的积极性，学到了越来越多前端的知识，并通过归纳总结来加深印象。 5. 渐入佳境，拓宽视野在那之后，我学前端技术非常快了，像 React、TypeScript、Redux、Dva、Umi、Lerna 等等都随用随学，随学随用。此外，我不仅仅关注前端网页开发本身，还同时关注前端的生态和发展，学习了微前端、Serverless、云开发、低代码等技术，因此个人的能力提升也很大。如今在鹅厂工作中也是，面对各种不同技术栈的前端项目，我都能迎难而上，毕竟不会就学嘛！ 哦，写的渐入佳境，我都忘了，自己是一名后端工程师，还搁这儿吹牛逼呢（ 所以本路线难免会有不专业的地方，请大家见谅~ 6. 总结总结一下，学前端的路线其实就一句话：基础三件套 =&gt; 巩固基础 =&gt; 学习框架 =&gt; 多做项目 =&gt; 按需学习 =&gt; 拓宽视野。还有一个学任何编程技术都要注意的点，全程多敲代码！多敲代码！多敲代码！ 尾声 - 持续学习优秀前端人的特质 深厚的功底 良好的编码习惯 发现问题的洞察力 思维灵活，善于思考 追求技术，紧跟前沿 有创造力，有行动力 追求用户体验 时刻保持好奇 全栈意识 解决问题的能力强 懂得合作和高效沟通 重视工作，同样重视生活 责任心和全局观 个人的进步能带动团队的进步 学习资源 编程导航（包含以下所有资源，强烈推荐 👍）：https://www.code-nav.cn freeCodecamp 在线编程：https://learn.freecodecamp.one/ 阿里云前端实战学习：https://edu.aliyun.com/roadmap/frontend W3Cschool 编程入门实战：https://www.w3cschool.cn/codecamp/ 腾讯云动手实验室：https://cloud.tencent.com/developer/labs/gallery pink老师前端入门教程：https://www.bilibili.com/video/BV14J4114768 MDN 前端文档：https://developer.mozilla.org/zh-CN Node.js 入门：https://cnodejs.org/getstart 前端清单：https://cheatsheets.devtool.tech/ 前端小课：https://lefex.github.io/ 被删的前端游乐场：http://www.godbasin.com/ 《ES6 入门教程》：https://es6.ruanyifeng.com/ 谷歌 Web 开发者：https://developers.google.com/web JavaScript 明星项目：https://risingstars.js.org/2020/zh Best of JS：https://bestofjs.org/ Codewars：https://www.codewars.com/?language=javascript Vue.js examples：https://vuejsexamples.com/ 前端资讯 掘金资讯：https://juejin.cn/news InfoQ：https://www.infoq.cn/topic/Front-end daily.dev：https://daily.dev/ 技术博客 掘金：https://juejin.cn/frontend 腾讯前端 IMWEB：http://imweb.io 腾讯 Web 前端团队 Alloy Team：http://www.alloyteam.com 淘宝前端团队：http://taobaofed.org 百度 Web 前端研发部：http://fex.baidu.com 京东凹凸实验室：https://aotu.io 360 奇舞团：https://75team.com 七牛团队技术博客：http://blog.qiniu.com 有赞技术团队：https://tech.youzan.com/tag/front-end/ 百度 EFE Tech：https://efe.baidu.com/ css-tricks：https://css-tricks.com/archives web.dev：https://web.dev/blog/ 学习要点 前期学习以培养兴趣为主，不要过于追求深层理解。 前端学习不能靠死记硬背，要多敲代码、多做项目实践。 不要急于求成，踏实积累才是硬道理。","categories":[{"name":"前端学习路线","slug":"前端学习路线","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}],"tags":[{"name":"学习路线","slug":"学习路线","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"}]},{"title":"日语","slug":"日语","date":"2022-01-17T06:11:51.000Z","updated":"2022-01-17T06:14:11.528Z","comments":true,"path":"2022/01/17/日语/","link":"","permalink":"http://example.com/2022/01/17/%E6%97%A5%E8%AF%AD/","excerpt":"","text":"日语","categories":[],"tags":[{"name":"日本語","slug":"日本語","permalink":"http://example.com/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"}]},{"title":"英语","slug":"英语","date":"2022-01-17T06:11:30.000Z","updated":"2022-01-17T06:12:27.951Z","comments":true,"path":"2022/01/17/英语/","link":"","permalink":"http://example.com/2022/01/17/%E8%8B%B1%E8%AF%AD/","excerpt":"","text":"英语","categories":[{"name":"英语","slug":"英语","permalink":"http://example.com/categories/%E8%8B%B1%E8%AF%AD/"}],"tags":[{"name":"English","slug":"English","permalink":"http://example.com/tags/English/"}]},{"title":"计算机组成原理","slug":"计算机组成原理","date":"2022-01-17T06:08:17.000Z","updated":"2022-01-19T08:15:20.880Z","comments":true,"path":"2022/01/17/计算机组成原理/","link":"","permalink":"http://example.com/2022/01/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/","excerpt":"","text":"计算机组成原理","categories":[{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"}],"tags":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"操作系统","slug":"操作系统","date":"2022-01-17T06:07:46.000Z","updated":"2022-01-17T06:10:20.034Z","comments":true,"path":"2022/01/17/操作系统/","link":"","permalink":"http://example.com/2022/01/17/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"操作系统","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"计算机网络","slug":"计算机网络","date":"2022-01-17T06:07:34.000Z","updated":"2022-01-17T06:09:30.195Z","comments":true,"path":"2022/01/17/计算机网络/","link":"","permalink":"http://example.com/2022/01/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/","excerpt":"","text":"计算机网络","categories":[{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"Python语言","slug":"Python语言","date":"2022-01-17T06:00:22.000Z","updated":"2022-01-17T06:06:21.477Z","comments":true,"path":"2022/01/17/Python语言/","link":"","permalink":"http://example.com/2022/01/17/Python%E8%AF%AD%E8%A8%80/","excerpt":"","text":"Python语言","categories":[],"tags":[{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"}]},{"title":"C语言","slug":"C语言","date":"2022-01-16T15:32:54.000Z","updated":"2022-01-16T16:13:19.259Z","comments":true,"path":"2022/01/16/C语言/","link":"","permalink":"http://example.com/2022/01/16/C%E8%AF%AD%E8%A8%80/","excerpt":"","text":"C语言介绍语言：人与计算机交流。 计算机语言：机器语言（二进制语言）-&gt;汇编语言-&gt;高级语言。 C语言：C生万物，主要用来做底层开发。","categories":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"数据结构","slug":"数据结构","date":"2022-01-16T15:32:23.000Z","updated":"2022-01-21T02:44:13.052Z","comments":true,"path":"2022/01/16/数据结构/","link":"","permalink":"http://example.com/2022/01/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/","excerpt":"","text":"数据结构第一章绪论定义数据：信息的载体，计算机识别并操作的二进制 数据元素：由一个或多个数据元素组成一项数据 数据项：由一个或多个数据项组成一项数据元素 数据对象：具有相同关系的数据元素为数据对象 数据结构：数据元素之间的关系称为数据结构 数据类型：对一类数据的集合一系列操作（原子类型、结构类型） 抽象数据类型：逻辑结构与数据运算相关操作 思维导图 算法定义：算法：处理数据的步骤 思维导图 算法效率的度量时间复杂度时间复杂度：O(1)&lt;O(log2n)&lt;O(n)&lt;O(nlog2n)&lt;O(n2)&lt;O(n3)&lt;O(n!)&lt;O(nn) 例：T(n)=3n+3=O(n) 保留更高阶 口诀：常对幂指阶 空间复杂度 第二章线性表思维导图","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"Java习题集","slug":"Java习题集","date":"2022-01-04T06:45:55.000Z","updated":"2022-07-20T03:31:21.606Z","comments":true,"path":"2022/01/04/Java习题集/","link":"","permalink":"http://example.com/2022/01/04/Java%E4%B9%A0%E9%A2%98%E9%9B%86/","excerpt":"","text":"Java习题集1.以下语句输出的结果是（）12345int value;value = 2;System.out.print(value);System.out.print(value++);System.out.print(value); 解析：答案：223 value++是一个函数，会返回+1之前的数值， 第三次打印value为+1之后的值。 2.下列程序输出的结果是（）12345678910111213public class Print&#123; static boolean out(char c)&#123; System.out.print(c); return true; &#125; public static void main(String[] argv)&#123; int i = 0; for(out(&#x27;A&#x27;);out(&#x27;B&#x27;) &amp;&amp; (i&lt;2);out(&#x27;C&#x27;))&#123; i++; out(&#x27;D&#x27;); &#125; &#125;&#125; 解析：答案：ABDCBDCB 本题考查for循环的执行顺序 , for( ① ; ② ; ④ ){ ③ }又三部分组成，执行顺序①-&gt;②-&gt;③-&gt;④ ，其中①只执行一次，②③④ 执行多次。 3.变量名命名规则1标识符可以包括这``4``种字符：字母、下划线、$、数字；开头不能是数字；不能是关键字","categories":[{"name":"Java习题集","slug":"Java习题集","permalink":"http://example.com/categories/Java%E4%B9%A0%E9%A2%98%E9%9B%86/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"markdown语法","slug":"markdown语法","date":"2021-12-29T09:39:37.000Z","updated":"2023-11-15T08:36:08.826Z","comments":true,"path":"2021/12/29/markdown语法/","link":"","permalink":"http://example.com/2021/12/29/markdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"Markdown 教程标题方式一 （=和-）1234一级标题=================二级标题----------------- 方式二 （#）123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 段落字体1234567891011121314151.斜体*斜体文本*_斜体文本_2.粗体**粗体文本**__粗体文本__3.斜体+粗体***斜粗体文本***___斜粗体文本___ 分隔线123456789101112在一行中用三个以上 * - _ 建立分隔线****我* * * *裂----开- - - - 了_ _ _ _ 删除线12添加两个 ~~~~删除线~~ 下滑线1&lt;u&gt;下滑线&lt;/u&gt; 脚注1字符名称[^脚注] 字符[^脚注] Markdown 列表 12345678910111.无序列表（*、+、-）* 第一项* 第二项* 第三项2.有序列表（数字+.）1. 第一项2. 第二项3. 第三项 列表嵌套1234567在第一项加四个空格1. 第一项 第一项的第一个元素 第一项的第二个元素2. 第二项 第二项的第一个元素 第二项的第二个元素 Markdown 区块1234567891011121314151617181920212223241.区块&gt; 这是一个区块2.区块嵌套&gt; 第一个区块&gt;&gt; 第二个区块&gt;&gt;&gt; 第三个区块3.区块中的列表&gt; 1. 第一项&gt; 2. 第二项&gt; 3. 第三项&gt; + 第一项&gt; + 第二项&gt; + 第三项4.列表中的区块（加四个缩进）1. 第一项 &gt; 第一个区块2. 第二项 &gt; 第二个区块 Markdown 代码123函数高亮（``） `print()` 代码区块1234指定： 1.四个空格 2.一个tab 3.~~~ （常用） markdown链接 1[链接名称](链接地址) 百度 高级链接12345&gt; 1.带标题链接 [链接名称](链接地址 &quot;标题&quot;)&gt; 2.网址和Email链接(可点击) &lt;网址/Email&gt;&gt; 3.带格式化的链接 *[链接名称](链接地址 &quot;标题&quot;)*、**[链接名称](链接地址 &quot;标题&quot;)**、[`链接名称`](#链接地址 &quot;标题&quot;)斜体**|粗体****|代码块``# Markdown 图片12345678!+链接 = ![图片名称](图片链接 &quot;图片标题&quot;)Html: &lt;img src=&quot;图片链接&quot; alt = &quot;图片alt&quot; title = &quot;图片title&quot;&gt; &gt; 1.无标题格式 ![Alt pic](/path/to/img.jpg)&gt; 2.有标题格式 ![Alt pic](/path/to/img.jpg &quot;Optional title&quot;)&gt;&gt; 链接图片 [![图片名称](图片链接 &quot;图片标题&quot;)](链接地址 &quot;链接标题&quot;) Markdown 表格12|表头|表头||表格|表格| 表头 表头 表格 表格 Markdown 内嵌 HTML 标签123456789&gt; 1.行级内联标签 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt;&gt; 2.区块标签 前后+空格 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt;&lt;table&gt; &lt;tr&gt; &lt;td&gt;test&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;","categories":[{"name":"markdown语法","slug":"markdown语法","permalink":"http://example.com/categories/markdown%E8%AF%AD%E6%B3%95/"}],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"java语言","slug":"java语言","date":"2021-12-29T09:34:12.000Z","updated":"2022-01-17T03:01:49.062Z","comments":true,"path":"2021/12/29/java语言/","link":"","permalink":"http://example.com/2021/12/29/java%E8%AF%AD%E8%A8%80/","excerpt":"","text":"Java语言Java基础JavaSe1","categories":[{"name":"java语言","slug":"java语言","permalink":"http://example.com/categories/java%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"}]},{"title":"常用IDE快捷键(windows)","slug":"常用IDE快捷键","date":"2021-12-27T02:15:51.000Z","updated":"2022-01-21T03:22:27.078Z","comments":true,"path":"2021/12/27/常用IDE快捷键/","link":"","permalink":"http://example.com/2021/12/27/%E5%B8%B8%E7%94%A8IDE%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"Idea快捷键EngLish Chinese VsCode快捷键EngLish Chinese Vim快捷键EngLish Chinese vim help: path 1:https://gamma-ray-studio.blogspot.com/2021/01/vim.html path 2:https://gamma-ray-studio.blogspot.com/2021/02/vim.html","categories":[{"name":"常用IDE快捷键(windows)","slug":"常用IDE快捷键-windows","permalink":"http://example.com/categories/%E5%B8%B8%E7%94%A8IDE%E5%BF%AB%E6%8D%B7%E9%94%AE-windows/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"http://example.com/tags/IDE/"}]},{"title":"hexo+github博客构建","slug":"hexo博客构建","date":"2021-12-25T12:17:23.000Z","updated":"2022-01-21T03:11:14.297Z","comments":true,"path":"2021/12/25/hexo博客构建/","link":"","permalink":"http://example.com/2021/12/25/hexo%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA/","excerpt":"","text":"hexo博客windows版123456789101112131415161718192021222324252627282930313233343536373839--- #安装Nodejsnode -v #查看node版本npm -v #查看npm版本npm install -g cnpm --registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器cnpm -v #查看cnpm版本cnpm install -g hexo-cli #安装hexo框架hexo -v #查看hexo版本mkdir blog #创建blog目录cd blog #进入blog目录hexo init #生成博客 初始化博客hexo s #启动本地博客服务http://localhost:4000/ #本地访问地址hexo n &quot;我的第一篇文章&quot; #创建新的文章 #返回blog目录hexo clean #清理hexo g #生成#Github创建一个新的仓库 YourGithubName.github.ionpm install hexo-deployer-git --save #最后安装Git部署插件----#配置_config.yml （注意有空格 复制别手敲）-----# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: git@github.com:xxx/xxx.github.io.git branch: master-----hexo d #部署到Github仓库里https://YourGithubName.github.io/ #访问这个地址可以查看博客 git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #下载yilia主题到本地#修改hexo根目录下的 _config.yml 文件 ： theme: yiliahexo c #清理一下hexo g #生成hexo d #部署到远程Github仓库https://YourGithubName.github.io/ #查看博客 mac版123456789101112131415161718192021222324252627282930313233343536373839--- #安装Nodejsnode -v #查看node版本npm -v #查看npm版本npm install -g cnpm --registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器cnpm -v #查看cnpm版本cnpm install -g hexo-cli #安装hexo框架hexo -v #查看hexo版本mkdir blog #创建blog目录cd blog #进入blog目录sudo hexo init #生成博客 初始化博客hexo s #启动本地博客服务http://localhost:4000/ #本地访问地址hexo n &quot;我的第一篇文章&quot; #创建新的文章 #返回blog目录hexo clean #清理hexo g #生成#Github创建一个新的仓库 YourGithubName.github.iocnpm install --save hexo-deployer-git #在blog目录下安装git部署插件----#配置_config.yml -----# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/YourGithubName/YourGithubName.github.io.git branch: master-----hexo d #部署到Github仓库里https://YourGithubName.github.io/ #访问这个地址可以查看博客 git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia #下载yilia主题到本地#修改hexo根目录下的 _config.yml 文件 ： theme: yiliahexo c #清理一下hexo g #生成hexo d #部署到远程Github仓库https://YourGithubName.github.io/ #查看博客 git上传错误 解决：https://blog.csdn.net/qq_43705131/article/details/107965888 关于typera上传hexo插入图片不显示解决：https://zhuanlan.zhihu.com/p/265077468 若有不清楚的地方，请看参考文档 参考文档：https://zhuanlan.zhihu.com/p/26625249 https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html https://www.bilibili.com/video/BV1Yb411a7ty?from=search&amp;seid=15129020633052123755&amp;spm_id_from=333.337.0.0","categories":[{"name":"hexo+github博客构建","slug":"hexo-github博客构建","permalink":"http://example.com/categories/hexo-github%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-12-25T11:50:59.179Z","updated":"2021-12-27T01:36:56.477Z","comments":true,"path":"2021/12/25/hello-world/","link":"","permalink":"http://example.com/2021/12/25/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hello World","slug":"Hello-World","permalink":"http://example.com/categories/Hello-World/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}],"categories":[{"name":"Git","slug":"Git","permalink":"http://example.com/categories/Git/"},{"name":"Typora常用快捷键键","slug":"Typora常用快捷键键","permalink":"http://example.com/categories/Typora%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E9%94%AE/"},{"name":"Linux 学习路线","slug":"Linux-学习路线","permalink":"http://example.com/categories/Linux-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"name":"Java 学习路线","slug":"Java-学习路线","permalink":"http://example.com/categories/Java-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"name":"Python 学习路线","slug":"Python-学习路线","permalink":"http://example.com/categories/Python-%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"name":"前端学习路线","slug":"前端学习路线","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"name":"英语","slug":"英语","permalink":"http://example.com/categories/%E8%8B%B1%E8%AF%AD/"},{"name":"计算机组成原理","slug":"计算机组成原理","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"},{"name":"操作系统","slug":"操作系统","permalink":"http://example.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"C语言","slug":"C语言","permalink":"http://example.com/categories/C%E8%AF%AD%E8%A8%80/"},{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"Java习题集","slug":"Java习题集","permalink":"http://example.com/categories/Java%E4%B9%A0%E9%A2%98%E9%9B%86/"},{"name":"markdown语法","slug":"markdown语法","permalink":"http://example.com/categories/markdown%E8%AF%AD%E6%B3%95/"},{"name":"java语言","slug":"java语言","permalink":"http://example.com/categories/java%E8%AF%AD%E8%A8%80/"},{"name":"常用IDE快捷键(windows)","slug":"常用IDE快捷键-windows","permalink":"http://example.com/categories/%E5%B8%B8%E7%94%A8IDE%E5%BF%AB%E6%8D%B7%E9%94%AE-windows/"},{"name":"hexo+github博客构建","slug":"hexo-github博客构建","permalink":"http://example.com/categories/hexo-github%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA/"},{"name":"Hello World","slug":"Hello-World","permalink":"http://example.com/categories/Hello-World/"}],"tags":[{"name":"版本控制系统","slug":"版本控制系统","permalink":"http://example.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"},{"name":"学习路线","slug":"学习路线","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"},{"name":"日本語","slug":"日本語","permalink":"http://example.com/tags/%E6%97%A5%E6%9C%AC%E8%AA%9E/"},{"name":"English","slug":"English","permalink":"http://example.com/tags/English/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"Python","slug":"Python","permalink":"http://example.com/tags/Python/"},{"name":"C","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"Java","slug":"Java","permalink":"http://example.com/tags/Java/"},{"name":"IDE","slug":"IDE","permalink":"http://example.com/tags/IDE/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}